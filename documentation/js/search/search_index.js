var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.036,1,2.274]],["body/classes/AllExceptionsFilter.html",[0,0.033,1,2.944,2,1.302,3,0.252,4,0.252,5,0.222,6,3.775,7,2.673,8,2.454,9,4.291,10,0.382,11,1.296,12,3.667,13,2.096,14,3.161,15,5.98,16,0.742,17,3.161,18,1.296,19,0.026,20,0.99,21,0.581,22,1.134,23,3.727,24,3.775,25,4.642,26,3.161,27,3.775,28,0.929,29,3.727,30,0.351,31,4.291,32,5.49,33,0.617,34,2.111,35,0.252,36,1.76,37,3.161,38,1.503,39,3.161,40,3.161,41,4.407,42,2.673,43,3.161,44,3.161,45,3.161,46,2.673,47,2.261,48,3.161,49,2.351,50,2.673,51,5.075,52,2.673,53,3.161,54,2.673,55,3.161,56,2.351,57,2.351,58,2.351,59,3.161,60,3.161,61,3.161,62,4.407,63,2.673,64,3.161,65,3.161,66,4.407,67,2.673,68,1.76,69,1.215,70,2.673,71,2.351,72,3.161,73,3.161,74,0.016,75,0.016]],["title/controllers/AppController.html",[76,1.749,77,2.274]],["body/controllers/AppController.html",[0,0.029,3,0.22,4,0.22,5,0.194,10,0.333,11,1.176,16,0.869,18,1.384,19,0.026,20,1.057,21,0.621,22,1.211,28,1.518,30,0.498,33,0.538,35,0.22,36,1.535,38,2.456,74,0.015,75,0.015,76,2.054,77,2.672,78,1.312,79,2.332,80,2.461,81,3.382,82,2.227,83,3.382,84,4.365,85,2.758,86,2.282,87,2.126,88,4,89,2.758,90,4,91,2.758,92,3.135,93,4,94,2.758,95,2.758,96,4.707,97,2.758,98,2.874,99,4,100,2.758,101,4,102,2.758,103,2.758,104,3.382,105,3.382,106,2.758,107,2.758,108,2.758,109,2.332,110,2.62,111,2.758,112,2.758,113,1.06,114,2.758,115,1.535,116,2.758,117,1.675,118,2.758,119,2.332,120,2.429,121,2.758,122,2.758,123,2.051,124,4,125,1.535,126,2.758,127,1.984,128,2.758,129,2.758,130,2.758,131,2.758,132,3.382,133,2.758,134,2.758,135,2.758,136,2.758,137,2.758]],["title/modules/AppModule.html",[138,1.001,139,2.274]],["body/modules/AppModule.html",[0,0.034,3,0.256,4,0.256,5,0.226,19,0.026,30,0.515,33,0.628,35,0.256,74,0.017,75,0.017,77,3.421,78,2.122,138,1.506,139,4.505,140,1.324,141,1.422,142,1.651,143,1.651,144,1.422,145,2.122,146,1.53,147,2.719,148,2.719,149,3.651,150,3.087,151,3.651,152,3.651,153,3.087,154,3.087,155,2.291,156,1.651,157,1.651,158,3.216,159,2.291,160,3.216,161,3.216,162,3.216,163,3.216,164,1.953,165,3.216,166,3.216,167,3.216,168,4.461,169,3.216,170,3.216,171,3.216,172,3.216,173,3.216,174,1.53]],["title/modules/AuthModule.html",[138,1.001,149,2.068]],["body/modules/AuthModule.html",[0,0.029,1,2.696,3,0.223,4,0.223,5,0.196,6,2.077,19,0.026,30,0.52,33,0.545,34,1.865,35,0.223,74,0.015,75,0.015,78,1.328,82,1.555,110,3.574,138,1.394,140,1.15,141,1.234,142,1.434,143,1.434,144,1.234,145,2.255,146,2.255,149,4.038,150,2.948,153,2.948,154,2.948,155,2.073,156,1.434,157,1.434,159,2.073,164,1.696,175,2.362,176,2.793,177,2.362,178,2.362,179,3.486,180,2.731,181,2.793,182,2.793,183,4.037,184,1.865,185,2.793,186,2.077,187,2.793,188,2.362,189,2.362,190,3.863,191,4.037,192,2.793,193,2.362,194,2.362,195,1.696,196,1.073,197,2.362,198,2.793,199,2.793,200,2.077,201,2.362,202,2.793,203,2.362,204,2.793,205,2.362,206,2.793,207,2.793,208,2.793]],["title/injectables/AuthService.html",[110,1.896,209,0.937]],["body/injectables/AuthService.html",[0,0.017,3,0.131,4,0.131,5,0.116,10,0.199,11,0.79,12,2.272,13,1.277,16,0.823,18,1.438,19,0.026,20,1.098,21,0.645,22,1.258,28,1.363,30,0.432,33,0.321,35,0.131,38,1.866,47,2.373,57,3.215,69,1.508,74,0.01,75,0.01,80,2.35,81,2.271,82,0.917,83,2.271,86,1.734,98,2.184,110,1.495,127,1.879,174,0.783,180,1.866,186,1.225,189,1.392,196,0.633,197,1.392,205,1.392,209,0.739,210,0.783,211,1.392,212,2.686,213,2.686,214,2.686,215,2.686,216,2.686,217,1.647,218,4.889,219,3.401,220,2.382,221,1.647,222,2.686,223,2.686,224,1.647,225,0.633,226,2.686,227,1.233,228,2.624,229,2.128,230,1.647,231,3.401,232,2.686,233,1.647,234,1.647,235,2.686,236,1.647,237,2.161,238,2.686,239,3.923,240,1.647,241,1.647,242,2.015,243,2.686,244,1.746,245,1.647,246,0.846,247,1.392,248,1.225,249,1.647,250,1.392,251,1.225,252,1.647,253,1,254,0.553,255,1.1,256,2.065,257,1.647,258,2.876,259,2.509,260,1.647,261,1.647,262,1.1,263,1.631,264,1.631,265,1.647,266,2.382,267,2.686,268,2.686,269,2.686,270,2.686,271,2.686,272,1.647,273,1.647,274,0.917,275,2.686,276,1.647,277,1.647,278,1.866,279,1.647,280,1.495,281,1.225,282,1.647,283,1.647,284,0.846,285,2.686,286,1.647,287,1.647,288,3.923,289,1.647,290,2.876,291,2.686,292,2.271,293,1.647,294,1.647,295,1.647,296,1.392,297,3.401,298,1.225,299,1.647,300,2.271,301,1.647,302,1.647,303,2.271,304,1.647,305,2.686,306,1.647,307,1.647,308,1.647,309,1.998,310,1.647,311,1.647,312,1.647,313,1.647,314,1.647,315,1.647,316,1.647,317,1.647,318,1.225,319,1.647,320,1.032,321,1.647,322,1.647,323,1.647,324,0.846,325,2.686,326,1.647]],["title/classes/CreatedSimpleUserDto.html",[0,0.036,98,1.896]],["body/classes/CreatedSimpleUserDto.html",[0,0.06,2,1.456,3,0.282,4,0.282,5,0.248,10,0.427,16,0.801,19,0.026,20,1.209,21,0.759,30,0.459,35,0.282,74,0.018,75,0.018,86,2.544,87,1.96,98,2.65,125,1.968,225,2.067,229,1.709,264,3.267,278,1.682,280,2.65,281,3.54,284,3.084,327,2.99,328,1.96,329,4.024,330,3.54,331,4.002,332,3.535,333,3.535,334,4.024,335,3.535,336,4.024,337,3.593,338,3.54,339,2.99,340,4.759,341,2.63,342,2.361,343,2.89,344,3.535,345,3.535,346,3.535,347,3.535,348,3.535,349,2.361,350,2.361,351,3.535,352,2.99,353,3.535,354,3.535]],["title/classes/CredentialDto.html",[0,0.036,86,1.505]],["body/classes/CredentialDto.html",[0,0.056,2,1.411,3,0.273,4,0.273,5,0.241,10,0.414,16,0.784,19,0.026,21,0.615,30,0.422,35,0.273,74,0.017,75,0.017,86,2.059,87,1.918,125,1.907,174,2.216,229,2.04,244,2.718,246,2.718,263,2.829,278,2.216,281,4.226,328,1.918,331,4.226,336,3.939,337,3.536,338,2.548,339,3.939,341,2.548,343,3.45,355,2.897,356,4.659,357,5.681,358,4.659,359,4.659,360,4.659,361,3.794,362,3.426,363,4.659,364,3.426,365,5.681,366,4.659,367,3.426,368,3.426,369,4.659,370,4.659,371,4.659,372,3.426,373,2.548,374,3.426,375,3.426]],["title/modules/CredentialModule.html",[138,1.001,150,1.749]],["body/modules/CredentialModule.html",[0,0.042,3,0.318,4,0.318,5,0.281,19,0.026,30,0.481,33,0.78,35,0.318,74,0.019,75,0.019,138,1.68,140,1.646,141,1.767,142,2.052,143,2.052,144,1.767,145,2.718,146,2.718,150,3.345,155,2.649,156,2.052,157,2.052,159,2.052,195,3.133,196,1.536,225,1.536,376,3.379,377,3.379,378,3.379,379,3.792,380,3.996,381,3.996,382,3.379,383,3.996]],["title/injectables/CredentialService.html",[209,0.937,379,1.896]],["body/injectables/CredentialService.html",[0,0.03,3,0.225,4,0.225,5,0.198,10,0.341,11,1.196,13,1.934,16,0.878,18,1.534,19,0.026,20,1.172,21,0.688,22,1.343,28,1.402,30,0.459,33,0.551,35,0.225,38,2.268,47,2.148,69,1.084,74,0.015,75,0.015,80,2.379,86,2.306,127,2.005,196,1.084,209,1.119,210,1.342,220,3.168,225,1.084,229,2.069,244,1.449,246,2.448,250,2.386,251,2.099,253,1.713,254,0.947,256,1.713,259,2.268,266,1.713,324,1.449,342,1.884,379,2.264,382,2.386,384,2.386,385,4.066,386,4.066,387,4.066,388,2.821,389,2.821,390,4.066,391,4.066,392,2.821,393,2.099,394,4.066,395,5.217,396,3.184,397,2.821,398,2.821,399,4.066,400,2.821,401,2.821,402,2.821,403,2.821,404,4.066,405,2.821,406,2.386,407,2.821,408,2.821,409,2.099,410,2.821,411,5.217,412,2.821,413,2.821,414,2.821,415,4.066,416,2.821,417,2.821]],["title/entities/Credentials.html",[225,1.309,418,1.505]],["body/entities/Credentials.html",[0,0.04,3,0.304,4,0.304,5,0.268,10,0.461,16,0.998,19,0.026,21,0.813,30,0.304,35,0.304,74,0.019,75,0.019,87,2.443,225,1.924,229,2.27,244,2.87,246,2.87,254,1.282,320,2.148,328,2.062,396,3.963,409,4.157,418,2.213,419,2.125,420,3.227,421,4.234,422,5.017,423,3.817,424,3.227,425,3.817,426,4.234,427,3.817,428,3.817,429,3.603,430,2.549,431,3.725]],["title/classes/CustomAndAddRoles1729176213783.html",[0,0.036,432,2.533]],["body/classes/CustomAndAddRoles1729176213783.html",[0,0.031,2,1.221,3,0.236,4,0.236,5,0.208,8,2.346,10,0.358,11,1.239,16,0.709,18,1.239,19,0.026,20,1.354,21,0.647,22,1.084,28,1.239,30,0.236,35,0.236,69,1.619,74,0.016,75,0.016,80,2.251,113,2.167,174,1.41,225,1.14,227,0.932,242,2.741,254,0.996,259,2.866,278,1.41,318,3.646,320,2.051,324,1.523,361,1.981,432,3.135,433,4.145,434,2.507,435,3.646,436,4.358,437,3.135,438,2.814,439,3.135,440,4.661,441,2.965,442,3.135,443,2.965,444,3.563,445,3.135,446,2.965,447,2.965,448,4.902,449,2.507,450,1.801,451,2.206,452,2.965,453,2.507,454,2.507,455,2.965,456,2.206,457,2.206,458,2.507,459,2.507,460,4.214,461,2.507,462,3.563,463,2.507,464,2.206,465,2.507,466,2.507,467,2.206,468,2.206,469,2.206,470,2.206,471,3.135,472,2.206,473,1.981,474,2.507,475,2.206,476,2.206,477,2.206,478,2.206,479,2.206]],["title/modules/DatabaseModule.html",[138,1.001,151,2.068]],["body/modules/DatabaseModule.html",[0,0.042,3,0.322,4,0.322,5,0.284,19,0.026,21,0.533,24,3.006,30,0.483,33,0.788,35,0.322,71,3.865,74,0.019,75,0.019,138,1.528,140,1.664,145,1.922,146,1.922,151,3.155,159,2.075,164,2.453,190,4.51,195,2.453,196,1.553,200,3.006,201,3.416,244,2.075,324,2.075,419,2.249,480,4.04,481,4.04,482,3.416,483,4.04,484,3.006,485,4.04,486,3.416,487,4.04,488,4.04,489,4.04,490,4.04,491,4.04,492,4.04,493,4.04,494,4.04]],["title/classes/FirstDatabaseModeled1729022289747.html",[0,0.036,495,2.533]],["body/classes/FirstDatabaseModeled1729022289747.html",[0,0.019,2,0.751,3,0.145,4,0.145,5,0.128,8,1.624,10,0.22,11,0.858,16,0.491,18,0.858,19,0.026,20,1.259,21,0.721,22,0.751,28,0.858,30,0.232,35,0.145,47,2,56,1.356,58,2.169,68,2.318,69,1.4,74,0.011,75,0.011,80,1.866,174,1.981,225,1.866,227,1.602,237,1.611,242,2.138,244,2.338,246,2.338,254,0.612,259,2.771,262,1.218,263,1.107,278,2.598,280,1.015,284,0.936,318,1.356,320,1.6,324,2.494,330,1.356,349,3.244,361,2.781,396,1.218,409,2.169,429,1.771,431,3.098,435,2.711,436,3.613,437,2.169,438,1.948,439,2.169,440,4.063,442,2.169,444,2.466,445,2.169,450,1.107,456,3.387,457,3.387,458,1.542,461,1.542,464,3.613,467,2.169,468,2.169,469,1.356,470,1.356,471,2.169,472,1.356,473,1.218,474,1.542,475,1.356,476,1.356,477,1.356,478,1.356,479,1.356,495,2.169,496,3.082,497,1.542,498,1.824,499,1.824,500,3.387,501,1.824,502,2.916,503,3.098,504,1.824,505,2.916,506,1.824,507,1.542,508,1.542,509,2.466,510,2.466,511,3.082,512,1.542,513,2.916,514,2.916,515,4.857,516,2.916,517,2.466,518,2.916,519,2.466,520,1.824,521,1.542,522,1.824,523,1.824,524,1.824,525,4.164,526,2.916,527,2.916,528,2.916,529,4.107,530,2.916,531,1.824,532,1.824,533,1.824,534,3.644,535,2.916,536,1.824,537,1.824,538,3.644,539,1.824,540,1.824,541,1.356,542,1.824,543,3.644,544,1.824,545,1.824,546,1.824,547,2.466,548,1.542,549,1.824,550,1.824,551,1.824,552,1.824,553,1.824]],["title/classes/HttpExceptionFilter.html",[0,0.036,554,2.533]],["body/classes/HttpExceptionFilter.html",[0,0.04,2,1.561,3,0.302,4,0.302,5,0.266,8,2.775,9,4.71,10,0.458,11,1.466,12,3.72,16,0.638,18,1.115,19,0.026,20,0.852,21,0.5,22,0.976,23,4.215,24,4.143,25,5.003,27,2.82,28,1.115,29,3.205,30,0.397,31,5.003,33,0.74,35,0.302,47,2.436,49,2.82,50,3.205,63,3.205,67,3.205,68,2.11,69,1.457,70,3.205,71,2.82,74,0.018,75,0.018,92,3.027,123,2.82,554,3.708,555,4.215,556,3.205,557,3.791,558,5.57,559,3.791,560,3.791,561,3.791,562,4.985,563,3.791,564,3.791,565,3.791]],["title/injectables/JwtAuthGuard.html",[117,2.068,209,0.937]],["body/injectables/JwtAuthGuard.html",[0,0.037,3,0.478,4,0.28,5,0.247,10,0.424,11,1.393,16,0.797,18,1.393,19,0.026,20,1.065,21,0.463,22,1.22,27,2.613,28,1.393,30,0.378,33,0.685,35,0.28,46,2.971,47,1.447,69,1.35,74,0.018,75,0.018,92,2.133,117,2.877,127,1.821,184,2.346,209,1.304,210,1.671,237,2.649,248,3.525,266,2.877,566,3.989,567,2.971,568,4.007,569,4.739,570,4.007,571,4.739,572,4.007,573,4.27,574,3.513,575,2.971,576,4.739,577,3.513,578,5.74,579,3.513,580,3.513,581,3.513,582,3.513,583,3.513,584,2.613,585,3.513,586,3.513,587,3.513,588,2.971,589,2.971,590,3.513,591,3.513,592,3.513]],["title/injectables/JwtStrategy.html",[179,2.068,209,0.937]],["body/injectables/JwtStrategy.html",[0,0.037,3,0.282,4,0.282,5,0.248,10,0.427,11,1.399,13,1.682,16,0.801,18,1.399,19,0.026,20,1.069,21,0.628,22,1.225,28,1.04,30,0.459,33,0.69,35,0.282,36,1.968,38,1.682,74,0.018,75,0.018,80,2.067,127,1.829,164,2.147,179,2.89,184,2.361,190,4.602,203,2.99,209,1.309,210,1.682,228,2.147,292,2.99,324,1.815,484,3.54,568,4.024,593,2.99,594,4.759,595,4.759,596,3.535,597,3.535,598,4.759,599,3.535,600,3.535,601,3.535,602,3.535,603,2.99,604,3.535,605,3.535,606,3.535,607,3.535,608,3.535,609,3.535,610,4.759,611,3.54,612,4.759,613,4.759,614,2.65,615,3.535,616,3.535]],["title/controllers/ProfileController.html",[76,1.749,617,2.274]],["body/controllers/ProfileController.html",[0,0.037,3,0.282,4,0.282,5,0.248,10,0.427,11,1.399,16,0.595,18,1.04,19,0.026,20,0.794,21,0.466,22,0.91,28,1.04,30,0.519,33,0.69,35,0.282,36,1.968,74,0.018,75,0.018,76,1.815,78,1.682,80,2.067,87,1.456,104,4.024,105,4.024,109,2.99,113,1.359,115,1.968,117,2.147,119,2.99,120,2.89,127,1.359,132,2.99,227,1.111,237,2.378,242,2.444,255,2.361,566,2.63,617,3.179,618,2.99,619,2.99,620,2.99,621,4.024,622,2.99,623,3.495,624,3.535,625,4.759,626,3.535,627,3.535,628,2.995,629,2.99,630,2.99,631,3.535,632,3.535,633,3.535,634,3.535,635,3.535,636,3.535,637,3.535,638,3.535]],["title/modules/ProfileModule.html",[138,1.001,152,2.068]],["body/modules/ProfileModule.html",[0,0.042,3,0.317,4,0.317,5,0.28,19,0.026,30,0.48,33,0.777,35,0.317,74,0.019,75,0.019,78,2.448,138,1.677,140,1.64,141,1.76,142,2.045,143,2.045,144,1.76,145,2.713,146,1.894,152,4.005,154,3.284,155,2.643,156,2.045,157,2.045,159,2.643,188,3.367,617,3.81,628,3.561,629,3.367,639,3.367,640,3.367,641,3.982,642,3.982,643,3.982]],["title/injectables/ProfileService.html",[209,0.937,628,1.896]],["body/injectables/ProfileService.html",[0,0.034,3,0.255,4,0.255,5,0.225,10,0.386,11,1.306,13,2.113,16,0.747,18,1.306,19,0.026,20,1.147,21,0.586,22,1.143,28,1.306,30,0.462,33,0.624,35,0.255,74,0.016,75,0.016,80,1.962,115,1.78,127,1.229,196,1.229,209,1.222,210,1.521,220,3.35,227,1.005,237,2.853,242,2.281,246,1.642,253,1.942,254,1.074,255,2.136,256,1.942,259,1.521,274,1.78,320,1.962,343,1.942,588,3.757,611,3.305,614,1.78,621,3.757,622,3.757,623,3.35,628,2.474,630,2.704,644,2.704,645,2.704,646,3.197,647,3.757,648,3.197,649,4.443,650,5.518,651,4.443,652,2.704,653,3.197,654,3.197,655,3.197,656,3.197,657,3.197,658,3.197,659,3.197,660,3.197,661,3.197,662,3.197,663,3.197,664,3.197,665,3.197,666,3.197,667,3.197]],["title/entities/RefreshToken.html",[82,1.896,418,1.505]],["body/entities/RefreshToken.html",[0,0.039,3,0.3,4,0.3,5,0.264,10,0.455,16,0.993,19,0.026,21,0.809,30,0.395,35,0.3,68,2.763,74,0.018,75,0.018,82,2.763,87,2.43,227,1.854,228,3.371,229,2.119,237,2.454,254,1.264,255,2.514,298,3.691,309,4.129,320,2.133,328,2.043,418,2.194,419,2.096,424,3.183,426,4.196,429,3.583,430,2.514,668,3.183,669,3.765,670,3.765,671,3.765,672,3.183,673,4.196,674,3.765,675,3.183,676,4.196,677,3.183]],["title/classes/RefreshToken1729265639063.html",[0,0.036,678,2.533]],["body/classes/RefreshToken1729265639063.html",[0,0.029,2,1.133,3,0.219,4,0.219,5,0.193,8,2.223,10,0.332,11,1.174,16,0.672,18,1.174,19,0.026,20,1.324,21,0.753,22,1.028,28,1.174,30,0.219,35,0.219,47,1.644,68,2.223,69,1.534,74,0.015,75,0.015,80,2.195,174,2.605,225,1.057,227,1.255,228,1.671,242,2.648,254,0.924,259,2.605,262,1.837,278,1.309,280,1.532,284,1.413,290,2.326,309,2.046,320,1.534,324,2.05,349,1.837,350,1.837,431,2.046,435,3.496,436,4.249,437,2.97,438,2.667,439,2.97,440,4.577,442,2.97,445,2.97,450,1.671,463,2.326,464,3.496,466,2.326,467,2.046,468,2.046,469,2.046,470,2.046,471,2.97,472,2.046,473,1.837,475,2.046,476,2.046,477,2.046,478,2.046,479,2.046,482,2.326,500,3.496,503,2.046,507,2.326,508,2.326,509,2.326,510,2.326,511,2.326,512,2.326,547,3.376,548,2.326,673,3.376,678,2.97,679,3.974,680,2.326,681,2.751,682,2.751,683,2.751,684,2.751,685,2.751,686,2.751,687,2.751,688,2.751,689,2.751,690,2.751,691,2.326,692,2.751,693,2.751,694,2.751,695,2.751,696,2.751,697,2.751,698,2.751]],["title/entities/Roles.html",[113,1.309,418,1.505]],["body/entities/Roles.html",[0,0.046,3,0.35,4,0.35,5,0.309,10,0.531,16,0.922,19,0.025,20,1.342,21,0.723,30,0.35,35,0.35,74,0.02,75,0.02,87,2.257,113,2.106,229,1.968,254,1.476,320,2.295,328,2.257,418,2.422,419,2.447,429,3.626,430,3.989,699,3.716,700,3.328,701,4.394,702,4.394]],["title/guards/RolesGuard.html",[120,2.068,703,2.533]],["body/guards/RolesGuard.html",[0,0.037,3,0.28,4,0.28,5,0.247,8,1.956,10,0.424,11,1.393,13,1.671,16,0.797,18,1.393,19,0.026,20,1.065,21,0.625,22,1.22,28,1.033,30,0.457,33,0.685,34,2.346,35,0.28,36,1.956,47,2.208,69,1.35,74,0.018,75,0.018,92,2.133,115,2.638,120,2.877,127,1.821,174,1.671,209,1.304,237,1.553,248,2.613,266,2.133,396,3.165,570,4.854,572,4.007,573,4.27,575,2.971,589,2.971,704,3.513,705,2.971,706,3.513,707,6.175,708,3.513,709,3.513,710,3.513,711,2.613,712,3.513,713,4.739,714,3.513,715,3.513,716,3.513,717,2.971,718,3.513,719,3.513,720,3.513,721,3.513,722,3.513]],["title/modules/RolesModule.html",[138,1.001,153,1.749]],["body/modules/RolesModule.html",[0,0.042,3,0.318,4,0.318,5,0.281,19,0.026,30,0.481,33,0.78,35,0.318,74,0.019,75,0.019,113,1.536,138,1.68,140,1.646,141,1.767,142,2.052,143,2.052,144,1.767,145,2.718,146,2.718,153,3.345,155,2.649,156,2.052,157,2.052,159,2.052,195,3.133,196,1.536,723,3.379,724,3.379,725,3.379,726,3.792,727,3.996,728,3.996,729,3.379,730,3.996]],["title/injectables/RolesService.html",[209,0.937,726,1.896]],["body/injectables/RolesService.html",[0,0.041,3,0.308,4,0.308,5,0.272,10,0.467,11,1.486,13,2.404,16,0.85,18,1.486,19,0.026,20,1.135,21,0.667,22,1.301,28,1.138,30,0.475,33,0.755,35,0.308,38,1.841,74,0.019,75,0.019,80,2.162,113,1.487,127,1.487,196,1.487,209,1.39,210,1.841,220,3.622,253,2.35,254,1.3,256,2.35,259,1.841,320,1.942,700,3.417,726,2.813,729,3.273,731,3.273,732,5.053,733,3.87,734,3.87,735,5.053,736,5.053,737,3.87,738,3.87,739,3.87]],["title/classes/UserDto.html",[0,0.036,740,2.274]],["body/classes/UserDto.html",[0,0.042,2,1.646,3,0.318,4,0.318,5,0.281,10,0.482,16,0.961,19,0.026,20,1.357,21,0.797,22,1.554,30,0.411,35,0.318,74,0.019,75,0.019,86,2.526,87,2.353,125,2.225,229,2.052,274,3.181,320,1.536,328,2.125,337,4.351,342,2.669,614,3.181,700,2.427,740,3.446,741,3.379,742,3.996,743,3.996,744,3.996,745,3.996]],["title/classes/UserSessionDto.html",[0,0.036,623,2.068]],["body/classes/UserSessionDto.html",[0,0.035,2,1.356,3,0.262,4,0.262,5,0.231,10,0.398,16,0.872,19,0.026,21,0.684,30,0.361,35,0.262,74,0.017,75,0.017,86,1.456,87,2.135,125,1.833,229,2.006,264,4.015,284,3.395,328,1.867,329,4.385,334,4.725,337,3.732,342,2.199,343,3.149,450,2.753,451,3.373,484,3.858,584,4.505,611,3.858,614,3.455,623,2.753,700,2.753,746,2.784,747,3.293,748,5.587,749,5.587,750,3.293,751,4.534,752,4.534,753,3.293]],["title/entities/Users.html",[227,1.07,418,1.505]],["body/entities/Users.html",[0,0.032,3,0.245,4,0.245,5,0.216,10,0.371,16,0.997,19,0.026,20,1.123,21,0.82,22,1.396,30,0.398,35,0.245,68,3.019,74,0.016,75,0.016,87,2.44,113,2.084,225,2.084,227,1.358,229,1.552,254,1.032,274,2.783,278,2.055,280,2.406,298,4.034,303,3.654,320,1.921,328,1.779,350,2.886,418,1.91,419,1.711,421,3.654,422,3.654,429,1.866,430,3.338,456,3.718,457,3.718,462,3.654,519,2.598,521,2.598,529,3.654,614,2.783,672,3.654,675,2.598,676,4.226,677,3.654,700,2.624,754,2.598,755,3.073,756,3.073,757,3.073,758,3.073,759,3.073,760,3.073,761,3.073,762,3.073,763,3.073,764,3.073,765,4.321,766,4.321,767,4.321,768,4.321,769,4.321]],["title/controllers/UsersController.html",[76,1.749,770,2.274]],["body/controllers/UsersController.html",[0,0.05,3,0.379,4,0.379,5,0.334,19,0.026,30,0.458,33,0.928,35,0.379,36,2.647,74,0.021,75,0.021,76,2.441,78,2.261,180,2.941,227,1.494,619,4.02,770,3.841,771,4.02,772,4.02,773,4.754]],["title/modules/UsersModule.html",[138,1.001,154,1.749]],["body/modules/UsersModule.html",[0,0.037,3,0.281,4,0.281,5,0.248,19,0.026,30,0.503,33,0.688,35,0.281,74,0.018,75,0.018,78,2.259,138,1.579,140,1.451,141,1.558,142,1.81,143,1.81,144,1.558,145,2.555,146,2.555,150,3.174,153,3.174,154,3.407,155,2.438,156,1.81,157,1.81,159,2.438,180,3.18,193,2.98,194,2.98,195,2.884,196,1.354,227,1.107,770,3.587,772,2.98,774,2.98,775,3.524,776,3.524,777,2.98,778,3.524,779,3.524,780,2.98,781,3.524]],["title/injectables/UsersService.html",[180,1.62,209,0.937]],["body/injectables/UsersService.html",[0,0.025,3,0.189,4,0.189,5,0.167,10,0.287,11,1.054,12,1.588,13,1.705,16,0.808,18,1.412,19,0.026,20,1.158,21,0.634,22,1.236,28,1.269,30,0.461,33,0.464,35,0.189,38,1.705,47,2.315,54,2.01,56,1.769,57,1.769,69,1.377,74,0.013,75,0.013,80,2.276,98,2.674,127,1.658,174,2.052,180,1.705,196,0.914,200,1.769,209,0.986,210,1.131,220,2.917,227,0.747,229,1.549,242,1.84,244,1.221,246,2.215,247,2.01,253,1.444,254,0.798,256,2.62,258,2.01,259,2.674,264,1.444,266,2.176,274,3.016,296,2.01,379,3.222,393,1.769,406,3.031,541,1.769,614,1.995,645,2.01,647,3.031,652,2.01,726,3.222,740,3.208,780,2.01,782,2.01,783,3.584,784,3.584,785,3.584,786,2.378,787,3.584,788,2.378,789,3.584,790,2.378,791,2.378,792,3.584,793,2.378,794,2.378,795,2.378,796,2.378,797,2.378,798,2.378,799,3.584,800,5.153,801,2.378,802,2.378,803,2.378,804,2.378,805,2.378,806,3.584,807,2.378,808,2.378,809,2.378,810,2.378,811,2.01,812,2.378,813,2.378,814,2.378,815,3.584,816,2.378,817,2.378,818,2.378]],["title/coverage.html",[819,3.923]],["body/coverage.html",[0,0.065,1,1.909,5,0.201,6,2.126,7,2.417,19,0.026,21,0.377,69,1.098,74,0.015,75,0.015,76,2.466,77,1.909,79,2.417,82,1.591,86,1.263,98,1.591,110,1.591,113,1.577,117,1.735,120,1.735,144,1.263,179,1.735,180,1.359,209,1.64,211,2.417,225,1.098,227,0.898,237,1.263,327,2.417,355,2.417,379,1.591,384,2.417,418,2.32,420,2.417,432,2.126,433,2.417,434,2.417,495,2.126,496,2.417,497,2.417,500,2.126,554,2.126,555,2.417,556,2.417,566,2.126,567,2.417,593,2.417,617,1.909,618,2.417,623,1.735,628,1.591,644,2.417,668,2.417,678,2.126,679,2.417,680,2.417,699,2.417,703,2.126,705,2.417,711,2.126,726,1.591,731,2.417,740,1.909,741,2.417,746,2.417,754,2.417,770,1.909,771,2.417,782,2.417,819,2.417,820,2.858,821,2.858,822,2.858,823,6.869,824,4.802,825,2.858,826,6.303,827,6.211,828,3.47,829,4.802,830,2.417,831,2.858,832,2.858,833,4.104,834,2.417,835,2.858,836,2.858,837,2.858,838,2.858,839,2.858]],["title/dependencies.html",[141,1.809,840,2.408]],["body/dependencies.html",[0,0.055,19,0.026,33,0.797,34,2.729,74,0.019,75,0.019,123,3.893,125,2.274,141,1.806,164,2.481,184,2.729,186,3.039,196,1.57,228,2.481,251,3.039,254,1.372,338,3.039,341,3.039,503,3.039,603,4.882,841,5.774,842,4.085,843,4.085,844,4.085,845,4.085,846,4.085,847,4.085,848,4.085,849,4.085,850,4.085,851,4.085,852,4.085,853,4.085,854,4.085,855,4.085,856,4.085,857,4.085,858,4.085,859,4.085,860,4.085,861,4.085,862,4.085,863,4.085,864,4.085]],["title/miscellaneous/enumerations.html",[865,1.585,866,3.461]],["body/miscellaneous/enumerations.html",[10,0.589,19,0.025,74,0.022,75,0.022,115,3.253,373,4.822,449,4.94,451,4.346,453,4.94,459,4.94,865,2.717,866,4.127,867,4.88,868,4.88]],["title/miscellaneous/functions.html",[865,1.585,869,3.461]],["body/miscellaneous/functions.html",[10,0.631,19,0.023,74,0.023,75,0.023,144,2.845,834,4.42,865,2.91,869,4.42,870,5.227]],["title/index.html",[10,0.344,871,2.848,872,2.848]],["body/index.html",[19,0.026,52,1.794,58,4.613,74,0.012,75,0.012,84,1.794,113,0.815,227,0.667,262,1.417,263,3.723,274,1.181,278,2.916,280,3.632,284,2.774,330,2.444,331,2.444,349,3.024,350,1.417,352,1.794,438,1.417,473,2.685,486,1.794,517,1.794,541,1.578,584,1.578,620,1.794,691,1.794,811,2.778,873,2.122,874,2.122,875,3.285,876,4.021,877,2.122,878,2.122,879,2.122,880,2.122,881,4.897,882,3.285,883,2.122,884,3.285,885,2.122,886,2.122,887,3.285,888,1.794,889,1.794,890,2.122,891,2.122,892,2.122,893,2.122,894,2.122,895,2.122,896,2.122,897,3.285,898,5.73,899,4.897,900,2.122,901,2.122,902,3.285,903,5.18,904,3.285,905,3.285,906,3.285,907,5.402,908,4.021,909,3.285,910,3.285,911,4.021,912,3.285,913,3.285,914,2.122,915,3.285,916,3.285,917,2.122,918,2.122,919,2.122,920,2.122,921,2.122,922,2.122,923,2.122,924,2.122,925,2.122,926,2.122,927,2.122,928,2.122,929,2.122,930,2.122,931,2.122,932,2.122,933,2.122,934,2.122,935,2.122,936,2.122,937,2.122,938,2.122,939,2.122,940,2.122,941,2.122,942,2.122,943,2.122,944,3.285,945,3.285,946,3.285,947,3.285,948,2.122,949,3.285,950,2.122,951,4.527,952,4.021,953,2.122,954,1.578,955,2.122,956,2.122,957,2.122,958,3.285,959,2.122,960,3.285,961,3.285,962,2.122,963,2.122,964,2.122,965,2.122,966,2.122,967,2.122,968,2.122,969,2.122,970,2.122,971,2.122,972,2.122,973,2.122,974,2.122,975,2.122,976,2.122,977,2.122,978,2.122,979,2.122,980,2.122,981,2.122,982,2.122]],["title/modules.html",[140,1.911]],["body/modules.html",[19,0.021,42,3.919,74,0.021,75,0.021,139,3.095,140,1.908,149,2.814,150,2.38,151,2.814,152,2.814,153,2.38,154,2.38,983,6.646,984,6.646,985,6.646,986,6.729,987,4.634]],["title/overview.html",[988,3.923]],["body/overview.html",[2,1.234,19,0.026,74,0.016,75,0.016,78,1.426,110,3.365,138,0.881,139,4.411,140,1.234,141,1.325,142,1.539,143,1.539,144,1.325,145,1.426,146,1.426,147,2.535,148,2.535,149,4.057,150,3.171,151,2.994,152,3.671,153,3.171,154,3.34,155,2.18,156,1.539,157,1.539,175,2.535,177,2.535,178,2.535,179,2.994,180,2.937,210,1.426,300,3.591,376,2.535,377,2.535,378,2.535,379,3.365,419,1.669,450,1.82,454,2.535,465,2.535,628,2.745,639,2.535,640,2.535,703,2.23,723,2.535,724,2.535,725,2.535,726,3.365,774,2.535,777,2.535,988,2.535,989,2.998]],["title/properties.html",[328,1.686,840,2.408]],["body/properties.html",[19,0.025,74,0.022,75,0.022,328,2.103,343,3.101,888,4.318,889,4.318,990,5.106,991,5.106,992,5.106,993,5.106,994,5.106]],["title/miscellaneous/variables.html",[865,1.585,954,3.045]],["body/miscellaneous/variables.html",[10,0.52,19,0.026,21,0.568,38,2.049,47,1.774,49,3.205,74,0.02,75,0.02,92,3.287,113,2.458,115,2.399,127,1.656,229,1.547,237,2.393,263,2.616,264,2.616,284,2.212,361,3.953,373,4.402,393,3.205,573,3.205,711,4.026,717,3.643,828,3.643,830,3.643,865,2.399,954,3.205,995,5.413,996,4.309,997,4.309,998,4.309,999,4.309,1000,4.309]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["0.14.1",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":450,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"classes/UserSessionDto.html":{},"overview.html":{}}}],["1.0.0",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["10.4.4",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["1095802996",{"_index":375,"title":{},"body":{"classes/CredentialDto.html":{}}}],["1095802996'})@isnotempty",{"_index":367,"title":{},"body":{"classes/CredentialDto.html":{}}}],["1h",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":452,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["2.4.3",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["20.18.0",{"_index":991,"title":{},"body":{"properties.html":{}}}],["255",{"_index":514,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["3",{"_index":454,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"overview.html":{}}}],["3.11.3",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":510,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["4",{"_index":465,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"overview.html":{}}}],["4.0.1",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["4.21.1",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":422,"title":{},"body":{"entities/Credentials.html":{},"entities/Users.html":{}}}],["7",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["7.4.2",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":417,"title":{},"body":{"injectables/CredentialService.html":{}}}],["9",{"_index":989,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":489,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["acceder",{"_index":971,"title":{},"body":{"index.html":{}}}],["access_token",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["actual",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["actualización",{"_index":521,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"entities/Users.html":{}}}],["actualizar",{"_index":540,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["add",{"_index":580,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["addselect('credential.email",{"_index":663,"title":{},"body":{"injectables/ProfileService.html":{}}}],["addselect('role.name",{"_index":664,"title":{},"body":{"injectables/ProfileService.html":{}}}],["addselect('users.name",{"_index":662,"title":{},"body":{"injectables/ProfileService.html":{}}}],["admin",{"_index":451,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/UserSessionDto.html":{},"miscellaneous/enumerations.html":{}}}],["agrega",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["ahora",{"_index":968,"title":{},"body":{"index.html":{}}}],["alguna",{"_index":974,"title":{},"body":{"index.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["almacena",{"_index":768,"title":{},"body":{"entities/Users.html":{}}}],["alter",{"_index":526,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["anidado",{"_index":347,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["antes",{"_index":893,"title":{},"body":{"index.html":{}}}],["api",{"_index":881,"title":{},"body":{"index.html":{}}}],["apiexcludeendpoint",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["apiextramodels",{"_index":336,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{}}}],["apiproperty",{"_index":337,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{}}}],["apiproperty({description",{"_index":329,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/UserSessionDto.html":{}}}],["apiproperty({title",{"_index":356,"title":{},"body":{"classes/CredentialDto.html":{}}}],["aplicación",{"_index":884,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":924,"title":{},"body":{"index.html":{}}}],["app.modle.ts",{"_index":923,"title":{},"body":{"index.html":{}}}],["app_filter",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":77,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":139,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archivo",{"_index":907,"title":{},"body":{"index.html":{}}}],["arguments",{"_index":592,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["argumentshost",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["asigna",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["asociada",{"_index":366,"title":{},"body":{"classes/CredentialDto.html":{}}}],["asociado",{"_index":360,"title":{},"body":{"classes/CredentialDto.html":{}}}],["async",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":920,"title":{},"body":{"index.html":{}}}],["auth.guard",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["auth.guard.ts",{"_index":567,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":577,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:6",{"_index":574,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":111,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/dto/credentials.dto",{"_index":112,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":118,"title":{},"body":{"controllers/AppController.html":{}}}],["authentication",{"_index":582,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard",{"_index":579,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":569,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":149,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":994,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":110,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autocompleten",{"_index":687,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["automática",{"_index":522,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["automáticamente",{"_index":769,"title":{},"body":{"entities/Users.html":{}}}],["autorizado",{"_index":720,"title":{},"body":{"guards/RolesGuard.html":{}}}],["auxiliar2@industriascts.com.co",{"_index":372,"title":{},"body":{"classes/CredentialDto.html":{}}}],["auxiliar2@industriascts.com.co'})@isemail()@transform",{"_index":362,"title":{},"body":{"classes/CredentialDto.html":{}}}],["available",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules.html":{}}}],["await",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["ayuda",{"_index":978,"title":{},"body":{"index.html":{}}}],["back",{"_index":914,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('ya",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["base",{"_index":909,"title":{},"body":{"index.html":{}}}],["based",{"_index":591,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bcrypt",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{}}}],["bcrypt.compare(tmppassword",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hashsync(pass",{"_index":416,"title":{},"body":{"injectables/CredentialService.html":{}}}],["bcryptjs",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"dependencies.html":{}}}],["bienvenido",{"_index":873,"title":{},"body":{"index.html":{}}}],["bigint",{"_index":463,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/RefreshToken1729265639063.html":{}}}],["body",{"_index":107,"title":{},"body":{"controllers/AppController.html":{}}}],["boolean",{"_index":396,"title":{},"body":{"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["botón",{"_index":946,"title":{},"body":{"index.html":{}}}],["browse",{"_index":986,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":983,"title":{},"body":{"modules.html":{}}}],["build",{"_index":962,"title":{},"body":{"index.html":{}}}],["cada",{"_index":523,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["calculada",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["call",{"_index":585,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["campo",{"_index":767,"title":{},"body":{"entities/Users.html":{}}}],["canactivate",{"_index":570,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":572,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canal",{"_index":981,"title":{},"body":{"index.html":{}}}],["carpeta",{"_index":951,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":479,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["catch",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":559,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["certain",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["char",{"_index":509,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["clase",{"_index":354,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"classes/RefreshToken1729265639063.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"classes/RefreshToken1729265639063.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"overview.html":{}}}],["cli.json",{"_index":932,"title":{},"body":{"index.html":{}}}],["clic",{"_index":945,"title":{},"body":{"index.html":{}}}],["client",{"_index":459,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"miscellaneous/enumerations.html":{}}}],["clientrole",{"_index":815,"title":{},"body":{"injectables/UsersService.html":{}}}],["cloud",{"_index":876,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_credentialmodule",{"_index":376,"title":{},"body":{"modules/CredentialModule.html":{},"overview.html":{}}}],["cluster_credentialmodule_exports",{"_index":377,"title":{},"body":{"modules/CredentialModule.html":{},"overview.html":{}}}],["cluster_credentialmodule_providers",{"_index":378,"title":{},"body":{"modules/CredentialModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":639,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":641,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":640,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":723,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":725,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":724,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":774,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":777,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":775,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":776,"title":{},"body":{"modules/UsersModule.html":{}}}],["collation",{"_index":467,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["column",{"_index":429,"title":{},"body":{"entities/Credentials.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["column({length",{"_index":421,"title":{},"body":{"entities/Credentials.html":{},"entities/Users.html":{}}}],["column({type",{"_index":424,"title":{},"body":{"entities/Credentials.html":{},"entities/RefreshToken.html":{}}}],["columna",{"_index":551,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["columnnames",{"_index":475,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["columns",{"_index":508,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["comando",{"_index":961,"title":{},"body":{"index.html":{}}}],["common",{"_index":921,"title":{},"body":{"index.html":{}}}],["common/decorators/roles.decorator",{"_index":114,"title":{},"body":{"controllers/AppController.html":{}}}],["common/enums/roles.enum",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["common/guards/roles.guard",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["comparepassword",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["compose",{"_index":911,"title":{},"body":{"index.html":{}}}],["compose.yml",{"_index":930,"title":{},"body":{"index.html":{}}}],["con",{"_index":541,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["config",{"_index":922,"title":{},"body":{"index.html":{}}}],["config/config",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('database.db_name",{"_index":487,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database.db_password",{"_index":488,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database.db_user",{"_index":485,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database.host",{"_index":483,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('passport.jwt.secret",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configura",{"_index":953,"title":{},"body":{"index.html":{}}}],["configuración",{"_index":906,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(error",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(exception",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["const",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(credentialrepository",{"_index":388,"title":{},"body":{"injectables/CredentialService.html":{}}}],["constructor(httpadapterhost",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["constructor(private",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":706,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":733,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(userservice",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":645,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["context",{"_index":575,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":716,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":715,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":589,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["contraseña",{"_index":365,"title":{},"body":{"classes/CredentialDto.html":{}}}],["controller",{"_index":76,"title":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('profile",{"_index":634,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('users",{"_index":773,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copia",{"_index":959,"title":{},"body":{"index.html":{}}}],["correo",{"_index":357,"title":{},"body":{"classes/CredentialDto.html":{}}}],["coverage",{"_index":819,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creación",{"_index":519,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"entities/Users.html":{}}}],["creado",{"_index":810,"title":{},"body":{"injectables/UsersService.html":{}}}],["crear",{"_index":469,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["createcredentials",{"_index":385,"title":{},"body":{"injectables/CredentialService.html":{}}}],["createcredentials(data",{"_index":391,"title":{},"body":{"injectables/CredentialService.html":{}}}],["created_at",{"_index":456,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"entities/Users.html":{}}}],["createdatecolumn",{"_index":765,"title":{},"body":{"entities/Users.html":{}}}],["createdatecolumn({type",{"_index":755,"title":{},"body":{"entities/Users.html":{}}}],["createdsimpleuserdto",{"_index":98,"title":{"classes/CreatedSimpleUserDto.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createduserwithcredentials",{"_index":783,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduserwithcredentials(data",{"_index":787,"title":{},"body":{"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser",{"_index":784,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(userdata",{"_index":789,"title":{},"body":{"injectables/UsersService.html":{}}}],["credencial",{"_index":533,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["credenciales",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{}}}],["credential",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"classes/UserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["credential.id",{"_index":656,"title":{},"body":{"injectables/ProfileService.html":{}}}],["credential.service",{"_index":381,"title":{},"body":{"modules/CredentialModule.html":{}}}],["credential/credential.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["credential_id",{"_index":529,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"entities/Users.html":{}}}],["credentialdto",{"_index":86,"title":{"classes/CredentialDto.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"coverage.html":{}}}],["credentialid",{"_index":534,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["credentialmodule",{"_index":150,"title":{"modules/CredentialModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["credentialrepository",{"_index":390,"title":{},"body":{"injectables/CredentialService.html":{}}}],["credentials",{"_index":225,"title":{"entities/Credentials.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Users.html":{},"coverage.html":{}}}],["credentials.password",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentialsdto",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["credentialservice",{"_index":379,"title":{"injectables/CredentialService.html":{}},"body":{"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["cts",{"_index":889,"title":{},"body":{"index.html":{},"properties.html":{}}}],["cts_cloud.sql",{"_index":917,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":561,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":560,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":515,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["custom",{"_index":581,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["customandaddroles.ts",{"_index":434,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"coverage.html":{}}}],["customandaddroles.ts:38",{"_index":441,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["customandaddroles.ts:5",{"_index":443,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["customandaddroles1729176213783",{"_index":432,"title":{"classes/CustomAndAddRoles1729176213783.html":{}},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"coverage.html":{}}}],["código",{"_index":879,"title":{},"body":{"index.html":{}}}],["cómo",{"_index":352,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"index.html":{}}}],["d",{"_index":963,"title":{},"body":{"index.html":{}}}],["data",{"_index":393,"title":{},"body":{"injectables/CredentialService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["data.credentials.email",{"_index":813,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.credentials.password",{"_index":814,"title":{},"body":{"injectables/UsersService.html":{}}}],["data.email",{"_index":408,"title":{},"body":{"injectables/CredentialService.html":{}}}],["data.name",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":486,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["database/database.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["database/migrations/*{.ts,.js",{"_index":493,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":151,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datainfo",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"entities/RefreshToken.html":{},"entities/Users.html":{}}}],["date().toisostring",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["datos",{"_index":330,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"index.html":{}}}],["de",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Users.html":{},"index.html":{}}}],["deberías",{"_index":969,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"entities/Credentials.html":{},"controllers/ProfileController.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{}}}],["decorators/roles.decorator",{"_index":712,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":361,"title":{},"body":{"classes/CredentialDto.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"miscellaneous/variables.html":{}}}],["defecto",{"_index":518,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"classes/UserSessionDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["denegado",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":141,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desarrollo",{"_index":910,"title":{},"body":{"index.html":{}}}],["descargado",{"_index":950,"title":{},"body":{"index.html":{}}}],["descargar",{"_index":947,"title":{},"body":{"index.html":{}}}],["description",{"_index":343,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"injectables/ProfileService.html":{},"classes/UserSessionDto.html":{},"properties.html":{}}}],["desde",{"_index":690,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["deseas",{"_index":685,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["docker",{"_index":898,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":929,"title":{},"body":{"index.html":{}}}],["dockerignore",{"_index":926,"title":{},"body":{"index.html":{}}}],["documentación",{"_index":874,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["documento",{"_index":900,"title":{},"body":{"index.html":{}}}],["down",{"_index":437,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["down(queryrunner",{"_index":439,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["dto",{"_index":346,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["dto/createdsimpleuser.dto",{"_index":796,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/credentials.dto",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/user.dto",{"_index":797,"title":{},"body":{"injectables/UsersService.html":{}}}],["dudes",{"_index":979,"title":{},"body":{"index.html":{}}}],["días",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["ejecución",{"_index":905,"title":{},"body":{"index.html":{}}}],["ejecuta",{"_index":960,"title":{},"body":{"index.html":{}}}],["ejecutar",{"_index":899,"title":{},"body":{"index.html":{}}}],["el",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialDto.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["electronico",{"_index":358,"title":{},"body":{"classes/CredentialDto.html":{}}}],["electrónico",{"_index":359,"title":{},"body":{"classes/CredentialDto.html":{}}}],["eliminar",{"_index":543,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["email",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["email_verified",{"_index":409,"title":{},"body":{"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/FirstDatabaseModeled1729022289747.html":{}}}],["email_verified_at",{"_index":535,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["empezar",{"_index":891,"title":{},"body":{"index.html":{}}}],["empresa",{"_index":887,"title":{},"body":{"index.html":{}}}],["en",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"index.html":{}}}],["encontrarás",{"_index":878,"title":{},"body":{"index.html":{}}}],["entities",{"_index":419,"title":{},"body":{"entities/Credentials.html":{},"modules/DatabaseModule.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"entities/Users.html":{},"overview.html":{}}}],["entity",{"_index":418,"title":{"entities/Credentials.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"entities/Users.html":{}},"body":{"entities/Credentials.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"entities/Users.html":{},"coverage.html":{}}}],["entity/credential.entity",{"_index":382,"title":{},"body":{"modules/CredentialModule.html":{},"injectables/CredentialService.html":{}}}],["entity/refreshtoken.entity",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["entity/roles.entity",{"_index":729,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entity/users.entity",{"_index":780,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity{.ts,.js",{"_index":490,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entorno",{"_index":955,"title":{},"body":{"index.html":{}}}],["entre",{"_index":472,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["enumerations",{"_index":866,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/roles.enum",{"_index":710,"title":{},"body":{"guards/RolesGuard.html":{}}}],["env",{"_index":908,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":948,"title":{},"body":{"index.html":{}}}],["err",{"_index":578,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["eslintrc.js",{"_index":927,"title":{},"body":{"index.html":{}}}],["establish",{"_index":587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["este",{"_index":811,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["esto",{"_index":689,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["estructura",{"_index":902,"title":{},"body":{"index.html":{}}}],["example",{"_index":584,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/UserSessionDto.html":{},"index.html":{}}}],["exception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{}}}],["exception.filter.ts",{"_index":556,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:7",{"_index":557,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptions.filter",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["exceptions.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:11",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptions.filter.ts:14",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["executioncontext",{"_index":573,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":806,"title":{},"body":{"injectables/UsersService.html":{}}}],["existe",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["exp",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{}}}],["expiración",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["expirationdate",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["expirationdate.setdate(expirationdate.getdate",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["explicamos",{"_index":896,"title":{},"body":{"index.html":{}}}],["export",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":123,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":568,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extrae",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/JwtStrategy.html":{},"classes/RefreshToken1729265639063.html":{}}}],["fecha",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"entities/Users.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyemail",{"_index":785,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":792,"title":{},"body":{"injectables/UsersService.html":{}}}],["findcredentialsbyemail",{"_index":386,"title":{},"body":{"injectables/CredentialService.html":{}}}],["findcredentialsbyemail(email",{"_index":394,"title":{},"body":{"injectables/CredentialService.html":{}}}],["firstdatabasemodeled.ts",{"_index":497,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"coverage.html":{}}}],["firstdatabasemodeled.ts:111",{"_index":498,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["firstdatabasemodeled.ts:7",{"_index":499,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["firstdatabasemodeled1729022289747",{"_index":495,"title":{"classes/FirstDatabaseModeled1729022289747.html":{}},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"coverage.html":{}}}],["firsttime",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["fk.columnnames.indexof('credential_id",{"_index":549,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["fk.columnnames.indexof('user_id",{"_index":696,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["foreign",{"_index":544,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["foreignkey",{"_index":547,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["forwardref",{"_index":794,"title":{},"body":{"injectables/UsersService.html":{}}}],["fuente",{"_index":880,"title":{},"body":{"index.html":{}}}],["function",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":869,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generar",{"_index":505,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["gestión",{"_index":885,"title":{},"body":{"index.html":{}}}],["get('auth/refresh",{"_index":93,"title":{},"body":{"controllers/AppController.html":{}}}],["get('me",{"_index":635,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('me')@roles(role.service",{"_index":624,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('prueba",{"_index":135,"title":{},"body":{"controllers/AppController.html":{}}}],["get('prueba')@useguards(jwtauthguard",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["getme",{"_index":621,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getme(@user",{"_index":637,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getme(user",{"_index":622,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getrawone",{"_index":667,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getting",{"_index":871,"title":{"index.html":{}},"body":{}}],["gitignore",{"_index":928,"title":{},"body":{"index.html":{}}}],["given",{"_index":651,"title":{},"body":{"injectables/ProfileService.html":{}}}],["grant_privileges.sql",{"_index":918,"title":{},"body":{"index.html":{}}}],["graph",{"_index":987,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":703,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard_name",{"_index":447,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["guards",{"_index":704,"title":{},"body":{"guards/RolesGuard.html":{}}}],["ha",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/UsersService.html":{}}}],["handlerequest",{"_index":571,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":576,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":415,"title":{},"body":{"injectables/CredentialService.html":{}}}],["hashpassword",{"_index":387,"title":{},"body":{"injectables/CredentialService.html":{}}}],["hashpassword(pass",{"_index":399,"title":{},"body":{"injectables/CredentialService.html":{}}}],["haz",{"_index":944,"title":{},"body":{"index.html":{}}}],["here",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{}}}],["host",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["http://localhost:8000/api",{"_index":972,"title":{},"body":{"index.html":{}}}],["httpadapter",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.getrequesturl(ctx.getrequest",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpexception",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":554,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpstatus",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["id",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"entities/Users.html":{}}}],["identificador",{"_index":748,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["identifier",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":506,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["ignoreexpiration",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["incorrecto",{"_index":414,"title":{},"body":{"injectables/CredentialService.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["industrias",{"_index":888,"title":{},"body":{"index.html":{},"properties.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["información",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["information",{"_index":650,"title":{},"body":{"injectables/ProfileService.html":{}}}],["init",{"_index":915,"title":{},"body":{"index.html":{}}}],["inject",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":799,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":209,"title":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/ProfileService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(credentials",{"_index":403,"title":{},"body":{"injectables/CredentialService.html":{}}}],["injectrepository(refreshtoken",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(roles",{"_index":738,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(users",{"_index":652,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["insert",{"_index":539,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["insertar",{"_index":536,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["instalación",{"_index":904,"title":{},"body":{"index.html":{}}}],["instalar",{"_index":897,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["instrucciones",{"_index":939,"title":{},"body":{"index.html":{}}}],["intente",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["is_refresh",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["isemail",{"_index":370,"title":{},"body":{"classes/CredentialDto.html":{}}}],["isglobal",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":339,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{}}}],["isnullable",{"_index":464,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["isprimary",{"_index":512,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["joincolumn",{"_index":675,"title":{},"body":{"entities/RefreshToken.html":{},"entities/Users.html":{}}}],["joincolumn({name",{"_index":677,"title":{},"body":{"entities/RefreshToken.html":{},"entities/Users.html":{}}}],["json",{"_index":564,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwt",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":117,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":179,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":545,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["la",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Users.html":{},"index.html":{}}}],["las",{"_index":331,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"index.html":{}}}],["leftjoinandselect('credentials",{"_index":655,"title":{},"body":{"injectables/ProfileService.html":{}}}],["leftjoinandselect('roles",{"_index":658,"title":{},"body":{"injectables/ProfileService.html":{}}}],["legend",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":431,"title":{},"body":{"entities/Credentials.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["license",{"_index":992,"title":{},"body":{"properties.html":{}}}],["listo",{"_index":967,"title":{},"body":{"index.html":{}}}],["literal",{"_index":744,"title":{},"body":{"classes/UserDto.html":{}}}],["lo",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"index.html":{}}}],["load",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["logic",{"_index":583,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["login(credentials",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(credentialsdto",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["longitud",{"_index":511,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["los",{"_index":537,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["líder",{"_index":957,"title":{},"body":{"index.html":{}}}],["lógica",{"_index":692,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["main.ts",{"_index":925,"title":{},"body":{"index.html":{}}}],["maneja",{"_index":688,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["mantiene",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["migraciones",{"_index":913,"title":{},"body":{"index.html":{}}}],["migration:run",{"_index":966,"title":{},"body":{"index.html":{}}}],["migrationinterface",{"_index":435,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["migrations",{"_index":491,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["miscellaneous",{"_index":865,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modificación",{"_index":524,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["modify",{"_index":527,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["module",{"_index":138,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":140,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["msg",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["mysql",{"_index":482,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/RefreshToken1729265639063.html":{}}}],["mysql2",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["ndice",{"_index":901,"title":{},"body":{"index.html":{}}}],["necesario",{"_index":348,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["necesitas",{"_index":977,"title":{},"body":{"index.html":{}}}],["negocio",{"_index":693,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["nest",{"_index":931,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":125,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"modules/DatabaseModule.html":{},"injectables/ProfileService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["noerror",{"_index":395,"title":{},"body":{"injectables/CredentialService.html":{}}}],["nombre",{"_index":334,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/UserSessionDto.html":{}}}],["notfoundexception",{"_index":402,"title":{},"body":{"injectables/CredentialService.html":{}}}],["notfoundexception('email",{"_index":413,"title":{},"body":{"injectables/CredentialService.html":{}}}],["now",{"_index":460,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["npm",{"_index":964,"title":{},"body":{"index.html":{}}}],["nuestro",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nuevamente",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["nuevo",{"_index":532,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["number",{"_index":700,"title":{},"body":{"entities/Roles.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{}}}],["o",{"_index":976,"title":{},"body":{"index.html":{}}}],["ocurrido",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["oficiales",{"_index":940,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":478,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["onetoone",{"_index":676,"title":{},"body":{"entities/RefreshToken.html":{},"entities/Users.html":{}}}],["onetoone(undefined)@joincolumn({name",{"_index":672,"title":{},"body":{"entities/RefreshToken.html":{},"entities/Users.html":{}}}],["onupdate",{"_index":520,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["operativo",{"_index":942,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":988,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":840,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":933,"title":{},"body":{"index.html":{}}}],["para",{"_index":349,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"index.html":{}}}],["param",{"_index":653,"title":{},"body":{"injectables/ProfileService.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["pass",{"_index":401,"title":{},"body":{"injectables/CredentialService.html":{}}}],["passport",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/UsersService.html":{}}}],["path",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{}}}],["path.join(__dirname",{"_index":492,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["payload",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.is_refresh",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.name",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.rol",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.rol.name",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pepe",{"_index":751,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["perez",{"_index":752,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["poder",{"_index":970,"title":{},"body":{"index.html":{}}}],["por",{"_index":517,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"index.html":{}}}],["posible",{"_index":894,"title":{},"body":{"index.html":{}}}],["post",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/login",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/register",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["prefix",{"_index":619,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["pregunta",{"_index":975,"title":{},"body":{"index.html":{}}}],["preguntar",{"_index":980,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":430,"title":{},"body":{"entities/Credentials.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"entities/Users.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":426,"title":{},"body":{"entities/Credentials.html":{},"entities/RefreshToken.html":{}}}],["private",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/ProfileService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["profile",{"_index":620,"title":{},"body":{"controllers/ProfileController.html":{},"index.html":{}}}],["profile.controller",{"_index":643,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.service",{"_index":629,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.module",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":617,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":152,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileservice",{"_index":628,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["promise",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"injectables/UsersService.html":{}}}],["propagación",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":328,"title":{"properties.html":{}},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"entities/Credentials.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"properties.html":{}}}],["propiedades",{"_index":345,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["provide",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["proyecto",{"_index":903,"title":{},"body":{"index.html":{}}}],["proyectos",{"_index":886,"title":{},"body":{"index.html":{}}}],["prueba",{"_index":137,"title":{},"body":{"controllers/AppController.html":{}}}],["public",{"_index":436,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["puedas",{"_index":890,"title":{},"body":{"index.html":{}}}],["qb",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["qb.execute",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["qr",{"_index":875,"title":{},"body":{"index.html":{}}}],["qr_cloud.sql",{"_index":958,"title":{},"body":{"index.html":{}}}],["que",{"_index":350,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Users.html":{},"index.html":{}}}],["queryrunner",{"_index":440,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["queryrunner.addcolumn('users",{"_index":461,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.createforeignkey('refresh_token",{"_index":694,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["queryrunner.createforeignkey('users",{"_index":474,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.createtable",{"_index":507,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["queryrunner.dropcolumn('roles",{"_index":446,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["queryrunner.dropcolumn('users",{"_index":552,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.dropforeignkey('refresh_token",{"_index":697,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["queryrunner.dropforeignkey('users",{"_index":550,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.droptable('credentials",{"_index":553,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.droptable('refresh_token",{"_index":698,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["queryrunner.gettable('refresh_token",{"_index":695,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["queryrunner.gettable('users",{"_index":546,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.query",{"_index":525,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.query('select",{"_index":531,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["queryrunner.query(`insert",{"_index":455,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["queryrunner.query(`update",{"_index":448,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{}}}],["r",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["raíz",{"_index":952,"title":{},"body":{"index.html":{}}}],["readme.md",{"_index":934,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["referencedcolumnnames",{"_index":477,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["referencedtablename",{"_index":476,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["reflect",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":707,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh_token",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"classes/RefreshToken1729265639063.html":{}}}],["refreshtoken",{"_index":82,"title":{"entities/RefreshToken.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/RefreshToken.html":{},"coverage.html":{}}}],["refreshtoken(@req",{"_index":133,"title":{},"body":{"controllers/AppController.html":{}}}],["refreshtoken(req",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["refreshtoken.ts",{"_index":680,"title":{},"body":{"classes/RefreshToken1729265639063.html":{},"coverage.html":{}}}],["refreshtoken.ts:5",{"_index":682,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["refreshtoken.ts:51",{"_index":681,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["refreshtoken1729265639063",{"_index":678,"title":{"classes/RefreshToken1729265639063.html":{}},"body":{"classes/RefreshToken1729265639063.html":{},"coverage.html":{}}}],["refreshtokenrepository",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["register",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":129,"title":{},"body":{"controllers/AppController.html":{}}}],["register(signupdto",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["relación",{"_index":470,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["relations",{"_index":805,"title":{},"body":{"injectables/UsersService.html":{}}}],["renombra",{"_index":949,"title":{},"body":{"index.html":{}}}],["repositorio",{"_index":877,"title":{},"body":{"index.html":{}}}],["repository",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/ProfileService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":565,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":717,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":713,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":721,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":411,"title":{},"body":{"injectables/CredentialService.html":{}}}],["reset",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["response",{"_index":558,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsebody",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["result",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieves",{"_index":649,"title":{},"body":{"injectables/ProfileService.html":{}}}],["return",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["rol",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{}}}],["rol_id",{"_index":462,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"entities/Users.html":{}}}],["rolbyid",{"_index":732,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolbyid(id",{"_index":736,"title":{},"body":{"injectables/RolesService.html":{}}}],["role",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["role.client",{"_index":625,"title":{},"body":{"controllers/ProfileController.html":{}}}],["role.id",{"_index":659,"title":{},"body":{"injectables/ProfileService.html":{}}}],["role.superadmin",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["roles",{"_index":113,"title":{"entities/Roles.html":{}},"body":{"controllers/AppController.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"controllers/ProfileController.html":{},"entities/Roles.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/Users.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles(role.client",{"_index":136,"title":{},"body":{"controllers/AppController.html":{}}}],["roles(role.service",{"_index":636,"title":{},"body":{"controllers/ProfileController.html":{}}}],["roles.service",{"_index":728,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles/roles.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["roles_key",{"_index":711,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":120,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@roles(role.client",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["rolesmodule",{"_index":153,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":735,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":726,"title":{"injectables/RolesService.html":{}},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":965,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["saverefreshtoken",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["saverefreshtoken(user_info",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["script",{"_index":912,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":916,"title":{},"body":{"index.html":{}}}],["se",{"_index":686,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["secret",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select('users.id",{"_index":661,"title":{},"body":{"injectables/ProfileService.html":{}}}],["sepa",{"_index":351,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["service",{"_index":453,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"miscellaneous/enumerations.html":{}}}],["servidor",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["session",{"_index":588,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/ProfileService.html":{}}}],["set",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{}}}],["setmetadata(roles_key",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["si",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"index.html":{}}}],["sido",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["siento",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["signoptions",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupdto",{"_index":101,"title":{},"body":{"controllers/AppController.html":{}}}],["sigue",{"_index":938,"title":{},"body":{"index.html":{}}}],["simpleregister",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["simpleregister(datainfo",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["sin",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["sistema",{"_index":941,"title":{},"body":{"index.html":{}}}],["sitio",{"_index":943,"title":{},"body":{"index.html":{}}}],["situations",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"modules/CredentialModule.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src",{"_index":919,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":870,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":867,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:18",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:23",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:31",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:38",{"_index":106,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:108",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:118",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:13",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:60",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/credentials.dto",{"_index":342,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"injectables/CredentialService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{}}}],["src/auth/dto/credentials.dto.ts",{"_index":355,"title":{},"body":{"classes/CredentialDto.html":{},"coverage.html":{}}}],["src/auth/dto/credentials.dto.ts:14",{"_index":364,"title":{},"body":{"classes/CredentialDto.html":{}}}],["src/auth/dto/credentials.dto.ts:22",{"_index":368,"title":{},"body":{"classes/CredentialDto.html":{}}}],["src/auth/entity/refreshtoken.entity.ts",{"_index":668,"title":{},"body":{"entities/RefreshToken.html":{},"coverage.html":{}}}],["src/auth/entity/refreshtoken.entity.ts:11",{"_index":671,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/entity/refreshtoken.entity.ts:15",{"_index":674,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/entity/refreshtoken.entity.ts:20",{"_index":669,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/entity/refreshtoken.entity.ts:8",{"_index":670,"title":{},"body":{"entities/RefreshToken.html":{}}}],["src/auth/guards/jwt",{"_index":566,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/auth/strategys/jwt.strategy.ts",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategys/jwt.strategy.ts:16",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategys/jwt.strategy.ts:7",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/decorators/roles.decorator",{"_index":631,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user.decorator",{"_index":627,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":830,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/usersession.dto",{"_index":630,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["src/common/dtos/usersession.dto.ts",{"_index":746,"title":{},"body":{"classes/UserSessionDto.html":{},"coverage.html":{}}}],["src/common/dtos/usersession.dto.ts:13",{"_index":750,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["src/common/dtos/usersession.dto.ts:22",{"_index":753,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["src/common/dtos/usersession.dto.ts:31",{"_index":747,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["src/common/enums/roles.enum",{"_index":632,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/common/enums/roles.enum.ts",{"_index":868,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/errors/all",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["src/common/errors/http",{"_index":555,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard",{"_index":633,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":705,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:10",{"_index":709,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:7",{"_index":708,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/credential/credential.module",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/credential/credential.module.ts",{"_index":380,"title":{},"body":{"modules/CredentialModule.html":{}}}],["src/credential/credential.service",{"_index":795,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/credential/credential.service.ts",{"_index":384,"title":{},"body":{"injectables/CredentialService.html":{},"coverage.html":{}}}],["src/credential/credential.service.ts:17",{"_index":392,"title":{},"body":{"injectables/CredentialService.html":{}}}],["src/credential/credential.service.ts:28",{"_index":397,"title":{},"body":{"injectables/CredentialService.html":{}}}],["src/credential/credential.service.ts:45",{"_index":400,"title":{},"body":{"injectables/CredentialService.html":{}}}],["src/credential/credential.service.ts:9",{"_index":389,"title":{},"body":{"injectables/CredentialService.html":{}}}],["src/credential/entity/credential.entity",{"_index":763,"title":{},"body":{"entities/Users.html":{}}}],["src/credential/entity/credential.entity.ts",{"_index":420,"title":{},"body":{"entities/Credentials.html":{},"coverage.html":{}}}],["src/credential/entity/credential.entity.ts:12",{"_index":423,"title":{},"body":{"entities/Credentials.html":{}}}],["src/credential/entity/credential.entity.ts:17",{"_index":425,"title":{},"body":{"entities/Credentials.html":{}}}],["src/credential/entity/credential.entity.ts:20",{"_index":428,"title":{},"body":{"entities/Credentials.html":{}}}],["src/credential/entity/credential.entity.ts:7",{"_index":427,"title":{},"body":{"entities/Credentials.html":{}}}],["src/database/database.module.ts",{"_index":480,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migrations/1729022289747",{"_index":496,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"coverage.html":{}}}],["src/database/migrations/1729176213783",{"_index":433,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"coverage.html":{}}}],["src/database/migrations/1729265639063",{"_index":679,"title":{},"body":{"classes/RefreshToken1729265639063.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/profile/profile.controller.ts",{"_index":618,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/profile/profile.controller.ts:20",{"_index":626,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.module.ts",{"_index":642,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/profile/profile.service.ts",{"_index":644,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/profile/profile.service.ts:20",{"_index":648,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:8",{"_index":646,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/roles/entity/roles.entity",{"_index":764,"title":{},"body":{"entities/Users.html":{}}}],["src/roles/entity/roles.entity.ts",{"_index":699,"title":{},"body":{"entities/Roles.html":{},"coverage.html":{}}}],["src/roles/entity/roles.entity.ts:6",{"_index":701,"title":{},"body":{"entities/Roles.html":{}}}],["src/roles/entity/roles.entity.ts:9",{"_index":702,"title":{},"body":{"entities/Roles.html":{}}}],["src/roles/roles.module",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/roles/roles.module.ts",{"_index":727,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service",{"_index":798,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/roles/roles.service.ts",{"_index":731,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:15",{"_index":737,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:7",{"_index":734,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/dto/createdsimpleuser.dto",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/dto/createdsimpleuser.dto.ts",{"_index":327,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createdsimpleuser.dto.ts:14",{"_index":333,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["src/users/dto/createdsimpleuser.dto.ts:19",{"_index":335,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["src/users/dto/user.dto.ts",{"_index":741,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts:10",{"_index":742,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:13",{"_index":745,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/dto/user.dto.ts:7",{"_index":743,"title":{},"body":{"classes/UserDto.html":{}}}],["src/users/entity/users.entity",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{}}}],["src/users/entity/users.entity.ts",{"_index":754,"title":{},"body":{"entities/Users.html":{},"coverage.html":{}}}],["src/users/entity/users.entity.ts:11",{"_index":759,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entity/users.entity.ts:15",{"_index":757,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entity/users.entity.ts:19",{"_index":760,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entity/users.entity.ts:23",{"_index":756,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entity/users.entity.ts:27",{"_index":762,"title":{},"body":{"entities/Users.html":{}}}],["src/users/entity/users.entity.ts:8",{"_index":758,"title":{},"body":{"entities/Users.html":{}}}],["src/users/users.controller.ts",{"_index":771,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.module",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{}}}],["src/users/users.module.ts",{"_index":778,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":782,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":786,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":790,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":793,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":788,"title":{},"body":{"injectables/UsersService.html":{}}}],["started",{"_index":872,"title":{"index.html":{}},"body":{}}],["statements",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":562,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["status(status",{"_index":563,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["strategy",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategys/jwt.strategy",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"entities/RefreshToken.html":{},"entities/Roles.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["suministradas",{"_index":956,"title":{},"body":{"index.html":{}}}],["super",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":590,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":586,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["superadmin",{"_index":449,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"miscellaneous/enumerations.html":{}}}],["support",{"_index":984,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":985,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":494,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tabla",{"_index":538,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["table",{"_index":500,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"coverage.html":{}}}],["table.foreignkeys.find(fk",{"_index":548,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["tablecolumn",{"_index":444,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{}}}],["tableforeignkey",{"_index":445,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["te",{"_index":895,"title":{},"body":{"index.html":{}}}],["teams",{"_index":982,"title":{},"body":{"index.html":{}}}],["test",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["text",{"_index":683,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["this.authservice.login(credentialsdto",{"_index":128,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.simpleregister(signupdto",{"_index":130,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.updateaccestoken(req.user",{"_index":134,"title":{},"body":{"controllers/AppController.html":{}}}],["this.createuser",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.credentialrepository.create",{"_index":407,"title":{},"body":{"injectables/CredentialService.html":{}}}],["this.credentialrepository.findone",{"_index":412,"title":{},"body":{"injectables/CredentialService.html":{}}}],["this.credentialrepository.save(tmpcredentials",{"_index":410,"title":{},"body":{"injectables/CredentialService.html":{}}}],["this.credentialservice.createcredentials",{"_index":812,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.credentialservice.findcredentialsbyemail(data.credentials.email",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.credentialservice.findcredentialsbyemail(email",{"_index":803,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashpassword(data.password",{"_index":405,"title":{},"body":{"injectables/CredentialService.html":{}}}],["this.httpadapterhost",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.sign",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(validatelogin",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.profileservice.getme(user",{"_index":638,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":714,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.refreshtokenrepository",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenrepository.create",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenrepository.exists",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.refreshtokenrepository.save(r",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesrepository.findoneby",{"_index":739,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.rolbyid(4",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.saverefreshtoken(validatelogin",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createduserwithcredentials(datainfo",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(email",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.create(userdata",{"_index":801,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.createquerybuilder('users",{"_index":654,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.usersrepository.findone",{"_index":804,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(tmpuser",{"_index":802,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.validatepassword(password",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(credentials.email",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["tienes",{"_index":973,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Users.html":{}}}],["title",{"_index":371,"title":{},"body":{"classes/CredentialDto.html":{}}}],["tmp",{"_index":530,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["tmpcredentials",{"_index":406,"title":{},"body":{"injectables/CredentialService.html":{},"injectables/UsersService.html":{}}}],["tmppass",{"_index":404,"title":{},"body":{"injectables/CredentialService.html":{}}}],["tmppassword",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["tmpuser",{"_index":800,"title":{},"body":{"injectables/UsersService.html":{}}}],["toclassonly",{"_index":363,"title":{},"body":{"classes/CredentialDto.html":{}}}],["token",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["token')@apiexcludeendpoint()@useguards(jwtauthguard",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["trabajar",{"_index":892,"title":{},"body":{"index.html":{}}}],["transform",{"_index":369,"title":{},"body":{"classes/CredentialDto.html":{}}}],["transformar",{"_index":353,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["transformer",{"_index":338,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"dependencies.html":{}}}],["true",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CredentialDto.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["tsconfig.build.json",{"_index":935,"title":{},"body":{"index.html":{}}}],["tsconfig.json",{"_index":936,"title":{},"body":{"index.html":{}}}],["tu",{"_index":691,"title":{},"body":{"classes/RefreshToken1729265639063.html":{},"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"modules/DatabaseModule.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UserDto.html":{},"classes/UserSessionDto.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"entities/Credentials.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Roles.html":{},"injectables/RolesService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/DatabaseModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([credentials",{"_index":383,"title":{},"body":{"modules/CredentialModule.html":{}}}],["typeormmodule.forfeature([refreshtoken",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([roles",{"_index":730,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([users",{"_index":781,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":481,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["un",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/UsersService.html":{}}}],["una",{"_index":883,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["unauthorizedexception('acceso",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('no",{"_index":719,"title":{},"body":{"guards/RolesGuard.html":{}}}],["unico",{"_index":749,"title":{},"body":{"classes/UserSessionDto.html":{}}}],["unknown",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CredentialService.html":{},"injectables/JwtStrategy.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":993,"title":{},"body":{"properties.html":{}}}],["uno",{"_index":471,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["unsigned",{"_index":466,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/RefreshToken1729265639063.html":{}}}],["up",{"_index":438,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"index.html":{}}}],["up(queryrunner",{"_index":442,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["update",{"_index":528,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["update(refreshtoken",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateaccestoken",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateaccestoken(user",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["updated_at",{"_index":457,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"entities/Users.html":{}}}],["updatedatecolumn",{"_index":766,"title":{},"body":{"entities/Users.html":{}}}],["updatedatecolumn({type",{"_index":761,"title":{},"body":{"entities/Users.html":{}}}],["usas",{"_index":504,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["useclass",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["usefactory",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["useguards(jwtauthguard",{"_index":132,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProfileController.html":{}}}],["user",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.credential.password",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":542,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["user.is_refresh",{"_index":718,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.rol.name",{"_index":722,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.userid",{"_index":666,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user_id",{"_index":673,"title":{},"body":{"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{}}}],["user_info",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_info.id",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata",{"_index":791,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto",{"_index":740,"title":{"classes/UserDto.html":{}},"body":{"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"classes/UserSessionDto.html":{}}}],["username",{"_index":484,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"classes/UserSessionDto.html":{}}}],["users",{"_index":227,"title":{"entities/Users.html":{}},"body":{"injectables/AuthService.html":{},"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/RefreshToken.html":{},"classes/RefreshToken1729265639063.html":{},"entities/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["users.controller",{"_index":779,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.credential_id",{"_index":657,"title":{},"body":{"injectables/ProfileService.html":{}}}],["users.rol_id",{"_index":660,"title":{},"body":{"injectables/ProfileService.html":{}}}],["users.service",{"_index":772,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/createdsimpleuser.dto",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":770,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersessiondto",{"_index":623,"title":{"classes/UserSessionDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UserSessionDto.html":{},"coverage.html":{}}}],["usersmodule",{"_index":154,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":647,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":180,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usuario",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatedSimpleUserDto.html":{},"classes/UserSessionDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["usuario'})@validatenested()@type(undefined",{"_index":332,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["utf8mb4_0900_ai_ci",{"_index":468,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{}}}],["utiliza",{"_index":684,"title":{},"body":{"classes/RefreshToken1729265639063.html":{}}}],["uuid",{"_index":503,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":502,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["v4",{"_index":501,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["valida",{"_index":344,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["validate",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatelogin",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenested",{"_index":340,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{}}}],["validatepassword",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepassword(tmppassword",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":341,"title":{},"body":{"classes/CreatedSimpleUserDto.html":{},"classes/CredentialDto.html":{},"dependencies.html":{}}}],["validpass",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["valor",{"_index":516,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["value",{"_index":373,"title":{},"body":{"classes/CredentialDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":374,"title":{},"body":{"classes/CredentialDto.html":{}}}],["values",{"_index":458,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{}}}],["varchar",{"_index":513,"title":{},"body":{"classes/FirstDatabaseModeled1729022289747.html":{}}}],["variable",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":954,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verifica",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":990,"title":{},"body":{"properties.html":{}}}],["void",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["web",{"_index":882,"title":{},"body":{"index.html":{}}}],["where(\"user_id",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('users.id",{"_index":665,"title":{},"body":{"injectables/ProfileService.html":{}}}],["y",{"_index":473,"title":{},"body":{"classes/CustomAndAddRoles1729176213783.html":{},"classes/FirstDatabaseModeled1729022289747.html":{},"classes/RefreshToken1729265639063.html":{},"index.html":{}}}],["yarn.lockinstalación",{"_index":937,"title":{},"body":{"index.html":{}}}],["yes",{"_index":398,"title":{},"body":{"injectables/CredentialService.html":{}}}],["zoom",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CredentialModule.html":{},"modules/ProfileModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/all-exceptions.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors/all-exceptions.filter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/errors/all-exceptions.filter.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ExceptionFilter,\n    Catch,\n    ArgumentsHost,\n    HttpException,\n    HttpStatus,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    constructor(private readonly httpAdapterHost: HttpAdapterHost) { }\n\n    catch(exception: unknown, host: ArgumentsHost): void {\n        // In certain situations `httpAdapter` might not be available in the\n        // constructor method, thus we should resolve it here.\n        const { httpAdapter } = this.httpAdapterHost;\n\n        const ctx = host.switchToHttp();\n\n        let msg = 'Lo siento, ha ocurrido un error en nuestro servidor'\n        console.log(exception);\n        \n        const httpStatus =\n            exception instanceof HttpException\n                ? exception.getStatus()\n                : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        if (exception instanceof HttpException) {\n            msg = exception.message\n        }\n\n        const responseBody = {\n            statusCode: httpStatus,\n            timestamp: new Date().toISOString(),\n            path: httpAdapter.getRequestUrl(ctx.getRequest()),\n            msg\n        };\n\n        httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(credentialsDTO: CredentialDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth/login')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialsDTO\n                                            \n                                                            CredentialDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('auth/refresh-token')@ApiExcludeEndpoint()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(signUpDto: CreatedSimpleUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth/register')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            CreatedSimpleUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                        \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('prueba')@UseGuards(JwtAuthGuard, RolesGuard)@Roles(Role.Client, Role.Admin, Role.SuperAdmin)\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth/auth.service';\nimport { CredentialDto } from './auth/dto/credentials.dto';\nimport { Roles } from './common/decorators/roles.decorator';\nimport { Role } from './common/enums/roles.enum';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\nimport { RolesGuard } from './common/guards/roles.guard';\nimport { CreatedSimpleUserDto } from './users/dto/createdSimpleUser.dto';\nimport { Request } from 'express';\nimport { ApiExcludeEndpoint } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {\n  }\n\n  @Post('auth/login')\n  async login(@Body() credentialsDTO: CredentialDto) {\n    return this.authService.login(credentialsDTO)\n  }\n\n  @Post('auth/register')\n  async register(@Body() signUpDto: CreatedSimpleUserDto) {\n    return this.authService.simpleRegister(signUpDto)\n  }\n\n  @Get('auth/refresh-token')\n  @ApiExcludeEndpoint()\n  @UseGuards(JwtAuthGuard)\n\n  async refreshToken(@Req() req: Request) {\n    return this.authService.updateAccesToken(req.user)\n  }\n\n  @Get('prueba')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Client, Role.Admin, Role.SuperAdmin)\n  async test() {\n    return 'prueba'\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCredentialModule\n\nCredentialModule\n\nAppModule -->\n\nCredentialModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CredentialModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseModule } from './database/database.module';\nimport { CredentialModule } from './credential/credential.module';\nimport { RolesModule } from './roles/roles.module';\nimport configuration from './config/config'\nimport { ProfileModule } from './profile/profile.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [configuration],\n      isGlobal: true\n    }),\n    AuthModule, \n    UsersModule, \n    DatabaseModule, \n    CredentialModule, \n    RolesModule, \n    ProfileModule\n  ],\n  controllers: [AppController],\n  providers: [\n    \n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCredentialModule\n\nCredentialModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCredentialModule->AuthModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CredentialModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategys/jwt.strategy';\nimport { UsersModule } from 'src/users/users.module';\nimport { UsersService } from 'src/users/users.service';\nimport { ConfigService } from '@nestjs/config';\nimport { APP_FILTER } from '@nestjs/core';\nimport { AllExceptionsFilter } from 'src/common/errors/all-exceptions.filter';\nimport { CredentialModule } from 'src/credential/credential.module';\nimport { RolesModule } from 'src/roles/roles.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RefreshToken } from './entity/refreshToken.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([RefreshToken]),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('passport.jwt.secret'),\n        signOptions: { expiresIn: '1h' }\n      })\n    }),\n    PassportModule,\n    UsersModule,\n    RolesModule,\n    CredentialModule,\n  ],\n  providers: [AuthService, JwtStrategy, UsersService, {\n    provide: APP_FILTER,\n    useClass: AllExceptionsFilter\n  }],\n  controllers: [],\n  exports: [AuthService]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                saveRefreshToken\n                            \n                            \n                                    Async\n                                simpleRegister\n                            \n                            \n                                    Async\n                                updateAccesToken\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService, refreshTokenRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(credentials: CredentialDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentials\n                                            \n                                                            CredentialDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveRefreshToken(user_info: Users, jwt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_info\n                                            \n                                                            Users\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        simpleRegister\n                        \n                    \n                \n            \n            \n                \n                        \n                    simpleRegister(dataInfo: CreatedSimpleUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataInfo\n                                            \n                                                            CreatedSimpleUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateAccesToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAccesToken(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePassword(tmpPassword: string, comparePassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tmpPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                comparePassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { CredentialDto } from './dto/credentials.dto';\nimport * as bcrypt from 'bcryptjs'\nimport { CreatedSimpleUserDto } from 'src/users/dto/createdSimpleUser.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { RefreshToken } from './entity/refreshToken.entity';\nimport { Repository } from 'typeorm';\nimport { Users } from 'src/users/entity/users.entity';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private userService: UsersService,\n        private jwtService: JwtService,\n        @InjectRepository(RefreshToken)\n        private refreshTokenRepository: Repository\n    ) { }\n\n    async validateUser(email: string, password: string): Promise {\n        try {\n            const user = await this.userService.findByEmail(email);\n\n            // Verifica si el usuario existe\n            if (!user) {\n                throw new UnauthorizedException('Acceso Denegado, intente nuevamente.');\n            }\n\n            const validPass = await this.validatePassword(password, user.credential.password);\n\n            if (validPass) {\n                const { credential, ...result } = user;\n                return result; // Retorna el usuario sin la información de credenciales\n            }\n\n            throw new UnauthorizedException('Acceso Denegado, intente nuevamente.');\n        } catch (error) {\n            throw error; // Mantiene la propagación del error\n        }\n    }\n\n    async login(credentials: CredentialDto) {\n        const validateLogin = await this.validateUser(credentials.email, credentials.password)\n\n        const access_token = this.jwtService.sign(validateLogin)\n        const refresh_token = this.jwtService.sign({\n            is_refresh: true,\n            ...validateLogin\n        }, { expiresIn: '7d' })\n\n        await this.saveRefreshToken(validateLogin, refresh_token)\n\n        return {\n            access_token,\n            refresh_token\n        }\n    }\n\n    async simpleRegister(dataInfo: CreatedSimpleUserDto) {\n        try {\n            const register = await this.userService.createdUserWithCredentials(dataInfo)\n            return register\n        } catch (error) {\n            throw new BadRequestException(error)\n        }\n    }\n\n    async saveRefreshToken(user_info: Users, jwt: string) {\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 7); // Agrega 7 días a la fecha actual\n\n        try {\n            const firstTime = await this.refreshTokenRepository.exists({\n                where: {\n                    user: user_info\n                }\n            })\n\n            if (!firstTime) {\n\n                const r = this.refreshTokenRepository.create({\n                    jwt,\n                    user: user_info,\n                    exp: expirationDate // Asigna la fecha de expiración calculada\n                });\n\n                return await this.refreshTokenRepository.save(r)\n            }\n\n\n            const qb = this.refreshTokenRepository\n                .createQueryBuilder()\n                .update(RefreshToken)\n                .set({\n                    jwt,\n                    exp: expirationDate\n                })\n                .where(\"user_id = :id\", { id: user_info.id })\n\n            return await qb.execute()\n        } catch (error) {\n            console.log(error);\n\n        }\n    }\n\n    async updateAccesToken(user: any) {\n\n        const access_token = this.jwtService.sign({\n            ...user,\n            is_refresh: false,\n        })\n\n        return { access_token }\n    }\n\n    async validatePassword(tmpPassword: string, comparePassword: string): Promise {\n        const isMatch = bcrypt.compare(tmpPassword, comparePassword);\n        return await isMatch\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatedSimpleUserDto.html":{"url":"classes/CreatedSimpleUserDto.html","title":"class - CreatedSimpleUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatedSimpleUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createdSimpleUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                credentials\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Datos de las credenciales del usuario'})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createdSimpleUser.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nombre del usuario'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createdSimpleUser.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CredentialDto } from \"src/auth/dto/credentials.dto\";\n\n@ApiExtraModels()\nexport class CreatedSimpleUserDto {\n\n    @ApiProperty({\n        description: 'Datos de las credenciales del usuario',\n    })\n    @ValidateNested() // Valida las propiedades del DTO anidado\n    @Type(() => CredentialDto) // Necesario para que `class-transformer` sepa cómo transformar la clase\n    credentials: CredentialDto;\n\n    @ApiProperty({\n        description: 'Nombre del usuario',\n    })\n    name: string\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialDto.html":{"url":"classes/CredentialDto.html","title":"class - CredentialDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'correo electronico', description: 'El correo electrónico asociado a las credenciales', default: 'auxiliar2@industriascts.com.co'})@IsEmail()@Transform( => , {toClassOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/credentials.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({title: 'Contraseña', description: 'La contraseña asociada a las credenciales', default: '1095802996'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/credentials.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty } from \"@nestjs/swagger\"\nimport { Transform } from \"class-transformer\";\nimport { IsEmail, IsNotEmpty } from \"class-validator\";\n\n@ApiExtraModels()\nexport class CredentialDto {\n    @ApiProperty({\n        title: 'correo electronico',\n        description: 'El correo electrónico asociado a las credenciales',\n        default: 'auxiliar2@industriascts.com.co'\n    })\n    @IsEmail()\n    @Transform(({ value }) => value.toLowerCase(), { toClassOnly: true })\n    email: string;\n\n    @ApiProperty({\n        title: 'Contraseña',\n        description: 'La contraseña asociada a las credenciales',\n        default: '1095802996'\n    })\n    @IsNotEmpty()\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CredentialModule.html":{"url":"modules/CredentialModule.html","title":"module - CredentialModule","body":"\n                   \n\n\n\n\n    Modules\n    CredentialModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CredentialModule\n\n\n\ncluster_CredentialModule_exports\n\n\n\ncluster_CredentialModule_providers\n\n\n\n\nCredentialService \n\nCredentialService \n\n\n\nCredentialModule\n\nCredentialModule\n\nCredentialService  -->\n\nCredentialModule->CredentialService \n\n\n\n\n\nCredentialService\n\nCredentialService\n\nCredentialModule -->\n\nCredentialService->CredentialModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/credential/credential.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CredentialService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CredentialService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CredentialService } from './credential.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Credentials } from './entity/credential.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Credentials])\n  ],\n  providers: [CredentialService],\n  exports: [CredentialService, TypeOrmModule]\n})\nexport class CredentialModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialService.html":{"url":"injectables/CredentialService.html","title":"injectable - CredentialService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credential/credential.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCredentials\n                            \n                            \n                                    Async\n                                findCredentialsByEmail\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/credential/credential.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        credentialRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCredentials(data: CredentialDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/credential/credential.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CredentialDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findCredentialsByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCredentialsByEmail(email: string, noError?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/credential/credential.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                noError\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/credential/credential.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Credentials } from './entity/credential.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CredentialDto } from 'src/auth/dto/credentials.dto';\nimport * as bcrypt from 'bcryptjs'\n\n@Injectable()\nexport class CredentialService {\n    constructor(\n        @InjectRepository(Credentials)\n        private credentialRepository: Repository\n    ) {\n\n    }\n\n    async createCredentials(data: CredentialDto) {\n        const tmpPass = await this.hashPassword(data.password)\n        const tmpCredentials = this.credentialRepository.create({\n            email: data.email,\n            password: tmpPass,\n            email_verified: false\n        })\n\n        return await this.credentialRepository.save(tmpCredentials)\n    }\n\n    async findCredentialsByEmail(email: string, noError?: boolean) {\n        const res = await this.credentialRepository.findOne({\n            where: {\n                email\n            }\n        })\n\n        if (noError) {\n            return res\n        }\n\n        if (!res)\n            throw new NotFoundException('Email incorrecto.')\n\n        return res\n    }\n\n    async hashPassword(pass: string) {\n        const hash = bcrypt.hashSync(pass, 8)\n        return hash\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Credentials.html":{"url":"entities/Credentials.html","title":"entity - Credentials","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Credentials\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credential/entity/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                email_verified\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credential/entity/credential.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email_verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credential/entity/credential.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credential/entity/credential.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credential/entity/credential.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n\n@Entity()\nexport class Credentials {\n    @PrimaryGeneratedColumn('uuid')\n    id: string\n\n    @Column({\n        length: 500\n    })\n    email: string\n\n    @Column({\n        type: 'boolean'\n    })\n    email_verified: boolean\n\n    @Column({ length: 500 })\n    password: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomAndAddRoles1729176213783.html":{"url":"classes/CustomAndAddRoles1729176213783.html","title":"class - CustomAndAddRoles1729176213783","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomAndAddRoles1729176213783\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1729176213783-customAndAddRoles.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1729176213783-customAndAddRoles.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1729176213783-customAndAddRoles.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner, TableColumn, TableForeignKey } from \"typeorm\";\n\nexport class CustomAndAddRoles1729176213783 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n\n        await queryRunner.dropColumn('roles', 'guard_name')\n        await queryRunner.query(`UPDATE roles SET name = 'superadmin' WHERE id = 1`)\n        await queryRunner.query(`UPDATE roles SET name = 'admin' WHERE id = 2`)\n        await queryRunner.query(`UPDATE roles SET name = 'service' WHERE id = 3`)\n\n        await queryRunner.query(`INSERT INTO roles (name, created_at, updated_at) VALUES ('client', NOW(), NOW())`)\n\n        await queryRunner.addColumn('users',\n            new TableColumn({\n                name: 'rol_id',\n                type: 'bigint',\n                isNullable: false,\n                default: '4', \n                unsigned: true\n                // collation: 'utf8mb4_0900_ai_ci'\n            })\n        )\n\n        // Crear la relación uno a uno entre users y credentials\n        await queryRunner.createForeignKey('users',\n            new TableForeignKey({\n                columnNames: ['rol_id'],\n                referencedTableName: 'roles',\n                referencedColumnNames: ['id'],\n                onDelete: 'CASCADE',\n            })\n        );\n\n\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as path from 'path'; \n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('database.host'),\n        username: configService.get('database.db_user'),\n        database: configService.get('database.db_name'),\n        password: configService.get('database.db_password'),\n        entities: [\n          __dirname + '/../**/*.entity{.ts,.js}'\n        ],\n        migrations: [path.join(__dirname, '../database/migrations/*{.ts,.js}')],\n        synchronize: false\n      })\n    })\n  ],\n  providers: [],\n  exports: []\n})\nexport class DatabaseModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FirstDatabaseModeled1729022289747.html":{"url":"classes/FirstDatabaseModeled1729022289747.html","title":"class - FirstDatabaseModeled1729022289747","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FirstDatabaseModeled1729022289747\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1729022289747-firstDatabaseModeled.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1729022289747-firstDatabaseModeled.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1729022289747-firstDatabaseModeled.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner, Table, TableColumn, TableForeignKey } from \"typeorm\";\nimport { v4 as uuidv4 } from 'uuid'; // Si usas uuid para generar IDs\n\n\nexport class FirstDatabaseModeled1729022289747 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n\n        await queryRunner.createTable(\n            new Table({\n                name: 'credentials',\n                columns: [\n                    {\n                        name: \"id\",\n                        type: 'char',\n                        length: '36', // Longitud del UUID\n                        isPrimary: true,\n                        collation: 'utf8mb4_0900_ai_ci'\n                    },\n                    {\n                        name: \"email\",\n                        type: \"varchar\",\n                        length: \"255\", // Longitud para email\n                        isNullable: false\n                    },\n                    {\n                        name: \"email_verified\",\n                        type: \"boolean\",\n                        isNullable: false\n                    },\n                    {\n                        name: \"password\",\n                        type: \"varchar\",\n                        length: \"255\", // Longitud para password\n                        isNullable: false\n                    },\n                    {\n                        name: 'created_at',\n                        type: 'timestamp',\n                        default: 'CURRENT_TIMESTAMP', // Valor por defecto para la creación\n                        isNullable: false\n                    },\n                    {\n                        name: 'updated_at',\n                        type: 'timestamp',\n                        default: 'CURRENT_TIMESTAMP', // Valor por defecto para la creación\n                        onUpdate: 'CURRENT_TIMESTAMP', // Actualización automática en cada modificación\n                        isNullable: false\n                    }\n                ]\n            }),\n            true\n        )\n\n        await queryRunner.query(`\n            ALTER TABLE users \n            MODIFY COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;\n        `);\n        \n        await queryRunner.query(`\n            ALTER TABLE users \n            MODIFY COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n        `);\n        \n\n        await queryRunner.addColumn('users',\n            new TableColumn({\n                name: 'credential_id',\n                type: 'char',\n                length: '36',\n                isNullable: true,\n                collation: 'utf8mb4_0900_ai_ci'\n            })\n        )\n\n        // Crear la relación uno a uno entre users y credentials\n        await queryRunner.createForeignKey('users',\n            new TableForeignKey({\n                columnNames: ['credential_id'],\n                referencedTableName: 'credentials',\n                referencedColumnNames: ['id'],\n                onDelete: 'CASCADE',\n            })\n        );\n\n        const tmp = await queryRunner.query('SELECT * FROM users')\n\n        for (const user of tmp) {\n            if (user) {\n                // Generar un nuevo UUID para la credencial\n                const credentialId = uuidv4();\n                const { email, email_verified_at, password, created_at, updated_at } = user\n\n                // Insertar los datos en la tabla credentials\n                await queryRunner.query(\n                    `INSERT INTO credentials (id, email, email_verified, password, created_at, updated_at)\n                    VALUES (?, ?, ?, ?, ?, ?)`,\n                    [credentialId, email, email_verified_at ? true : false, password, created_at, updated_at]\n                );\n\n                // Actualizar la tabla users con el credential_id\n                await queryRunner.query(\n                    `UPDATE users SET credential_id = ? WHERE id = ?`,\n                    [credentialId, user.id]\n                );\n            }\n        }\n\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n\n        // Eliminar la foreign key\n        const table = await queryRunner.getTable('users');\n        const foreignKey = table.foreignKeys.find(fk => fk.columnNames.indexOf('credential_id') !== -1);\n        await queryRunner.dropForeignKey('users', foreignKey);\n\n        // Eliminar la columna credential_id de users\n        await queryRunner.dropColumn('users', 'credential_id');\n\n        // Eliminar la tabla credentials\n        await queryRunner.dropTable('credentials');\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/errors/http-exception.filter.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    \n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n    canActivate(context: ExecutionContext) {\n        // Add your custom authentication logic here\n        // for example, call super.logIn(request) to establish a session.\n        const request = context.switchToHttp().getRequest();\n        return super.canActivate(context);\n    }\n\n    handleRequest(err, user, info) {\n        // You can throw an exception based on either \"info\" or \"err\" arguments\n        if (err || !user) {\n            throw err || new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategys/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategys/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategys/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private configService: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: configService.get('passport.jwt.secret'),\n        });\n    }\n\n    async validate(payload: any) {\n\n        if (payload.is_refresh) {\n            return { is_refresh: payload.is_refresh, userId: payload.id, username: payload.name, rol: payload.rol }\n        }\n\n        return { userId: payload.id, username: payload.name, rol: payload.rol.name };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getMe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(user: UserSessionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@Roles(Role.Service, Role.Admin, Role.SuperAdmin, Role.Client)\n                \n            \n\n                    \n                        \n                            Defined in src/profile/profile.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserSessionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { User } from 'src/common/decorators/user.decorator';\nimport { ProfileService } from './profile.service';\nimport { UserSessionDto } from 'src/common/dtos/userSession.dto';\nimport { Users } from 'src/users/entity/users.entity';\nimport { Roles } from 'src/common/decorators/roles.decorator';\nimport { Role } from 'src/common/enums/roles.enum';\nimport { RolesGuard } from 'src/common/guards/roles.guard';\n\n@Controller('profile')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class ProfileController {\n\n    constructor(private profileService: ProfileService) {\n    }\n\n    @Get('me')\n    @Roles(Role.Service, Role.Admin, Role.SuperAdmin, Role.Client)\n    async getMe(@User() user: UserSessionDto): Promise {\n        return this.profileService.getMe(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_ProfileModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nUsersModule->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { ProfileController } from './profile.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n  ],\n  providers: [ProfileService],\n  controllers: [ProfileController]\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/profile/profile.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(user: UserSessionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/profile/profile.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Retrieves the user information for the given user id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserSessionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user session\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                the user information\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserSessionDto } from 'src/common/dtos/userSession.dto';\nimport { Users } from 'src/users/entity/users.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class ProfileService {\n\n    constructor(\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n    ) { }\n\n    /**\n     * Retrieves the user information for the given user id\n     * @param user the user session\n     * @returns the user information\n     */\n    async getMe(user: UserSessionDto): Promise {\n        return await this.usersRepository.createQueryBuilder('users')\n            .leftJoinAndSelect('credentials', 'credential', 'credential.id = users.credential_id')\n            .leftJoinAndSelect('roles', 'role', 'role.id = users.rol_id')\n            .select('users.id', 'id')\n            .addSelect('users.name', 'name')\n            .addSelect('credential.email', 'email')\n            .addSelect('role.name', 'rol')\n            .where('users.id = :userId', { userId: user.userId })\n            .getRawOne()\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RefreshToken.html":{"url":"entities/RefreshToken.html","title":"entity - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entity/refreshToken.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                exp\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                jwt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        exp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/refreshToken.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/refreshToken.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/refreshToken.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Users\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entity/refreshToken.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Users } from \"src/users/entity/users.entity\";\nimport { Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class RefreshToken {\n\n    @PrimaryGeneratedColumn('uuid')\n    id: string\n\n    @Column()\n    jwt: string\n\n    @OneToOne(() => Users)\n    @JoinColumn({name: 'user_id'})\n    user: Users\n\n    @Column({\n        type: 'timestamp'\n    })\n    exp: Date\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken1729265639063.html":{"url":"classes/RefreshToken1729265639063.html","title":"class - RefreshToken1729265639063","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken1729265639063\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1729265639063-refreshToken.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1729265639063-refreshToken.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1729265639063-refreshToken.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner, Table, TableForeignKey } from \"typeorm\";\n\nexport class RefreshToken1729265639063 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n\n        await queryRunner.createTable(\n            new Table({\n                name: 'refresh_token',\n                columns: [\n                    {\n                        name: \"id\",\n                        type: 'char',\n                        length: '36', // Longitud del UUID\n                        isPrimary: true,\n                        collation: 'utf8mb4_0900_ai_ci'\n                    },\n                    {\n                        name: 'jwt',\n                        type: 'text',\n                        isNullable: false,\n                    },\n                    {\n                        name: 'user_id',\n                        type: 'bigint',\n                        isNullable: false,\n                        unsigned: true\n                    },\n                    {\n                        name: 'exp',\n                        type: 'timestamp', // Utiliza 'timestamp' para MySQL\n                        isNullable: true\n                        // Si deseas que se autocompleten, maneja esto desde tu lógica de negocio\n                    }\n                ]\n            }),\n            true\n        )\n\n        // Crear la relación uno a uno entre users y credentials\n        await queryRunner.createForeignKey('refresh_token',\n            new TableForeignKey({\n                columnNames: ['user_id'],\n                referencedTableName: 'users',\n                referencedColumnNames: ['id'],\n                onDelete: 'CASCADE',\n            })\n        );\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n\n        const table = await queryRunner.getTable('refresh_token');\n        const foreignKey = table.foreignKeys.find(fk => fk.columnNames.indexOf('user_id') !== -1);\n        await queryRunner.dropForeignKey('refresh_token', foreignKey);\n\n        await queryRunner.dropTable('refresh_token', true)\n\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Roles.html":{"url":"entities/Roles.html","title":"entity - Roles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Roles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entity/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entity/roles.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entity/roles.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Roles {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/roles.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../enums/roles.enum';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    const request = context.switchToHttp().getRequest();\n\n    if (!requiredRoles) {\n      return true;\n    }\n    \n    const user = request.user\n\n    if (user.is_refresh) {\n      throw new UnauthorizedException('No autorizado');\n    }\n    \n    return requiredRoles.some((role) => user.rol.name === role);\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Roles } from './entity/roles.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Roles])\n  ],\n  providers: [RolesService],\n  exports: [RolesService, TypeOrmModule]\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                rolById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        rolById\n                        \n                    \n                \n            \n            \n                \n                        \n                    rolById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Roles } from './entity/roles.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class RolesService {\n\n    constructor(\n        @InjectRepository(Roles)\n        private rolesRepository: Repository,) {\n\n    }\n\n    async rolById(id: number) {\n        return await this.rolesRepository.findOneBy({ id })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                credential\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                rol\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credential\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rol\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { CredentialDto } from \"src/auth/dto/credentials.dto\";\n\nexport class UserDto {\n\n    @ApiProperty()\n    name: string\n\n    @ApiProperty()\n    credential?: CredentialDto\n\n    @ApiProperty()\n    rol?: {\n        id: number,\n        name: string\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSessionDto.html":{"url":"classes/UserSessionDto.html","title":"class - UserSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/userSession.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                rol\n                            \n                            \n                                    \n                                userId\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Rol del usuario', example: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/userSession.dto.ts:31\n                        \n                    \n\n            \n                \n                    Rol del usuario\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Identificador unico del usuario', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/userSession.dto.ts:13\n                        \n                    \n\n            \n                \n                    Identificador unico del usuario\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nombre del usuario', example: 'Pepe Perez'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/userSession.dto.ts:22\n                        \n                    \n\n            \n                \n                    Nombre del usuario\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { CredentialDto } from \"src/auth/dto/credentials.dto\";\n\nexport class UserSessionDto {\n\n    /**\n     * Identificador unico del usuario\n     */\n    @ApiProperty({\n        description: 'Identificador unico del usuario',\n        example: 1\n    })\n    userId: number;\n\n    /**\n     * Nombre del usuario\n     */\n    @ApiProperty({\n        description: 'Nombre del usuario',\n        example: 'Pepe Perez'\n    })\n    username: string;\n\n    /**\n     * Rol del usuario\n     */\n    @ApiProperty({\n        description: 'Rol del usuario',\n        example: 'admin'\n    })\n    rol: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credential\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                rol\n                            \n                            \n                                    \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Credentials\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'credential_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        rol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'rol_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Credentials } from \"src/credential/entity/credential.entity\";\nimport { Roles } from \"src/roles/entity/roles.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Users {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({length: 500})\n    name: string\n\n    @OneToOne(() => Credentials)\n    @JoinColumn({name: 'credential_id'})\n    credential?: Credentials\n\n    @OneToOne(() => Roles)\n    @JoinColumn({name: 'rol_id'})\n    rol?: Roles\n\n    // Campo que almacena la fecha de creación automáticamente\n    @CreateDateColumn({ type: 'timestamp' })\n    created_at: Date;\n\n    // Campo que almacena la fecha de actualización automáticamente\n    @UpdateDateColumn({ type: 'timestamp' })\n    updated_at: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n\n    constructor(private usersService: UsersService) {\n        \n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nCredentialModule\n\nCredentialModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCredentialModule->UsersModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CredentialModule\n                        \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entity/users.entity';\nimport { CredentialModule } from 'src/credential/credential.module';\nimport { RolesModule } from 'src/roles/roles.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Users]),\n    CredentialModule,\n    RolesModule\n  ],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService, TypeOrmModule]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createdUserWithCredentials\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, credentialService: CredentialService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialService\n                                                  \n                                                        \n                                                                        CredentialService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createdUserWithCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    createdUserWithCredentials(data: CreatedSimpleUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatedSimpleUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(userData: UserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            UserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Users } from './entity/users.entity';\nimport { Repository } from 'typeorm';\nimport { CredentialService } from 'src/credential/credential.service';\nimport { CreatedSimpleUserDto } from './dto/createdSimpleUser.dto';\nimport { UserDto } from './dto/user.dto';\nimport { RolesService } from 'src/roles/roles.service';\n\n@Injectable()\nexport class UsersService {\n\n    constructor(\n        @InjectRepository(Users)\n        private usersRepository: Repository,\n        @Inject(forwardRef(() => CredentialService))\n        private credentialService: CredentialService,\n        @Inject(forwardRef(() => RolesService))\n        private rolesService: RolesService,\n    ) { }\n\n    async createUser(userData: UserDto) {\n        const tmpUser = this.usersRepository.create(userData)\n        return await this.usersRepository.save(tmpUser)\n    }\n\n    async findByEmail(email: string): Promise {\n        const tmpCredentials = await this.credentialService.findCredentialsByEmail(email)\n\n        const tmpUser = await this.usersRepository.findOne({\n            relations: {\n                credential: true,\n                rol: true\n            },\n            where: {\n                credential: tmpCredentials\n            }\n        })\n\n        return tmpUser\n    }\n\n    async createdUserWithCredentials(data: CreatedSimpleUserDto) {\n\n        try {\n            const exist = await this.credentialService.findCredentialsByEmail(data.credentials.email, true)\n\n            if (exist) {\n                throw new BadRequestException('Ya ha sido creado un usuario con este Email')\n            }\n\n            const credential = await this.credentialService.createCredentials({ email: data.credentials.email, password: data.credentials.password })\n            const clientRole = await this.rolesService.rolById(4)\n\n            if (credential) {\n                const tmpUser = await this.createUser({\n                    name: data.name,\n                    credential: credential,\n                    rol: clientRole\n                })\n                return tmpUser\n            }\n        } catch (error) {\n            throw new BadRequestException(error)\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/credentials.dto.ts\n            \n            class\n            CredentialDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entity/refreshToken.entity.ts\n            \n            entity\n            RefreshToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategys/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/userSession.dto.ts\n            \n            class\n            UserSessionDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/common/errors/all-exceptions.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/errors/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/credential/credential.service.ts\n            \n            injectable\n            CredentialService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/credential/entity/credential.entity.ts\n            \n            entity\n            Credentials\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1729022289747-firstDatabaseModeled.ts\n            \n            class\n            FirstDatabaseModeled1729022289747\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1729176213783-customAndAddRoles.ts\n            \n            class\n            CustomAndAddRoles1729176213783\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1729265639063-refreshToken.ts\n            \n            class\n            RefreshToken1729265639063\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/roles/entity/roles.entity.ts\n            \n            entity\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/createdSimpleUser.dto.ts\n            \n            class\n            CreatedSimpleUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/entity/users.entity.ts\n            \n            entity\n            Users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 10.4.4\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : 10.4.4\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : 10.4.4\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : 10.0.2\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            express : ^4.21.1\n        \n            mysql2 : ^3.11.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 SuperAdmin\n                            \n                        \n                        \n                            \n                                Value : superadmin\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Service\n                            \n                        \n                        \n                            \n                                Value : service\n                            \n                        \n                        \n                            \n                                 Client\n                            \n                        \n                        \n                            \n                                Value : client\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n🎉 Bienvenido a la documentación de QR Cloud 🎉\nEn este repositorio encontrarás el código fuente de la API web de QR Cloud, una aplicación de gestión de proyectos para la empresa INDUSTRIAS CTS. Para que puedas empezar a trabajar con la API lo antes posible, te explicamos cómo instalar Docker y ejecutar la aplicación en este documento. 📚\nÍndice\n\nEstructura del proyecto\nInstalación de Docker\nEjecución de la API\nConfiguración del archivo .env\nBase de datos de desarrollo\nEjecutar Docker Compose\nEjecutar script de migraciones\n\n\n\nEstructura del proyecto\nExample :cloud-back/\n├── init-scripts/\n│   ├── cts_cloud.sql\n│   └── grant_privileges.sql\n├── src/\n│   ├── auth\n│   ├── common\n│   ├── config\n│   ├── credential\n│   ├── database\n│   ├── profile\n│   ├── roles\n│   ├── users\n│   ├── app.modle.ts\n│   ├── app.controller.ts\n│   └── main.ts\n│   \n├── test/\n├── .dockerignore\n├── .eslintrc.js\n├── .gitignore\n├── Dockerfile\n├── docker-compose.yml\n├── nest-cli.json\n├── package.json\n├── README.md\n├── tsconfig.build.json\n├── tsconfig.json\n└── yarn.lockInstalación de Docker\nPara instalar Docker, sigue las instrucciones oficiales de instalación para tu sistema operativo en el sitio web de Docker. 🌐\nEjecución de la API\nConfiguración del archivo .env\n\nHaz clic en el botón \"Descargar\" en el archivo .env.example y renombra el archivo descargado a .env en la carpeta raíz del proyecto.\nConfigura las variables de entorno suministradas por el líder de proyecto. 🔑\n\nBase de datos de desarrollo\n\nHaz clic en el botón \"Descargar\" en el archivo qr_cloud.sql y copia el archivo en la carpeta init-scripts.\nRenombra el archivo a qr_cloud.sql. 📂\n\nEjecutar Docker Compose\n\nEjecuta el comando docker-compose up --build -d en la carpeta raíz del proyecto. 🚀\n\nEjecutar script de migraciones\n\nEjecuta el comando npm run migration:run en la carpeta raíz del proyecto. 📈\n\n¡Listo! Ahora deberías poder acceder a la API en http://localhost:8000/api. Si tienes alguna pregunta o necesitas ayuda, no dudes en preguntar en el canal de Teams de la empresa. 💬\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CredentialModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CredentialModule\n\n\n\ncluster_CredentialModule_exports\n\n\n\ncluster_CredentialModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCredentialModule\n\nCredentialModule\n\nAuthModule -->\n\nCredentialModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCredentialModule->UsersModule\n\n\n\nAppModule -->\n\nCredentialModule->AppModule\n\n\n\n\n\nCredentialService \n\nCredentialService \n\nCredentialService  -->\n\nCredentialModule->CredentialService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nProfileModule -->\n\nUsersModule->ProfileModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCredentialService\n\nCredentialService\n\nCredentialModule -->\n\nCredentialService->CredentialModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 20.18.0\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : BY Industrias CTS\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user; // Extrae el usuario del request\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
